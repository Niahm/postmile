/*
* Copyright (c) 2011 Yahoo! Inc. All rights reserved. Copyrights licensed under the New BSD License.
* See LICENSE file included with this code project for license terms.
*/

YUI.add("sled", function (h) { YUI.add("sledglobal", function (B) { B.namespace("sled"); B.namespace("sled.global"); B.sled.global = { profile: {}, contacts: [], sleds: [], sled: null, users: {}, tips: {}, tip: -1, last: null }; B.namespace("sled.gsled"); B.sled.gsled = B.sled.global }, "1.0.0", { requires: ["node"] }); YUI.add("sledhistory", function (E) { var D = E.sled.gsled; var C; function B() { history.setHash(C) } function F() { C = new E.HistoryHash({}); E.on("history:change", function (H) { var I = H.changed; if (I.sled && H.src !== "replace" && E.sled.sled) { var G = D.sleds[I.sled.newVal]; E.fire("sled:renderSled", G) } }) } F(); E.namespace("sled").history = { hash: C, last: null} }, "1.0.0", { requires: ["history"] }); var e; var d; function r(B) { if (typeof h === "undefined") { console.log(B) } else { } } function l(D, C, B, E) { if ((typeof (h) === "undefined") || (typeof (h.fire) === "undefined")) { console.log("Y not available to fire " + D) } else { h.fire(D, C, B, E) } } function q(B) { getCredentials(function (C) { e = C; var D = document.location.href.split("#")[1]; var E = D ? D.split("sled=") : null; d = E ? E[1] : null; B() }) } function f(I, G, F, C, D) { if (!e) { return } if (G.indexOf("http://") !== 0 && G.indexOf("https://") !== 0) { G = postmile.api.uri + "/" + G } var B = MAC.getAuthorizationHeader(I, G, e, (F !== "" || I === "POST" || I === "PUT" ? F : null), null); var H = { headers: { Authorization: B }, xdr: { use: "native" }, timeout: 3000, method: I, on: { success: function (K, N) { var L = []; if (N.responseText) { try { L = JSON.parse(N.responseText); L._networkRequestStatusCode = K.status } catch (M) { r("JSON Parse failed!"); return } } else { r("JSON no data to parse!"); return } if (L.error) { l("sled:networkError", L) } if (L.code === 401) { refreshCredentials() } if (L.code === 403) { var J = function () { f(I, G, F, C, D) }; if (L.message === "Insufficient TOS accepted") { window.location = postmile.api.uri + "/login" } else { l("sled:askJoinCurrentSled", true, J) } } if (C) { C(L, D) } }, failure: function (J, K) { r("Async call failed!") } } }; var E = new XMLHttpRequest(); E.onreadystatechange = function () { if (E.readyState === 4) { if (E.status !== 200 && E.status !== 201) { r("Request failed " + JSON.stringify(E)) } H.on.success(E, E) } }; E.open(I, G); E.uri = G; E.setRequestHeader("Authorization", B); E.setRequestHeader("Content-Type", "application/json"); E.send(F) } function n(C, D, B) { f("GET", C, null, D, B) } function x(D, C, E, B) { f("PUT", D, C, E, B) } function c(D, C, E, B) { if (C === null) { C = "" } f("POST", D, C, E, B) } function s(D, C, E, B) { f("DELETE", D, C, E, B) } YUI.add("sleduser", function (E) { var D = E.sled.gsled; function B(H) { if (H) { D.activeSledId = H } else { var G = function (I) { if (I && (I._networkRequestStatusCode && I._networkRequestStatusCode === 200)) { D.activeSledId = I.activesled } else { } }; n("storage/activesled", G) } n("profile", C); n("sleds", function (I) { E.fire("sled:renderSleds", I, true) }); n("contacts", function (I) { E.fire("sled:renderContacts", I) }) } function C(I) { if (!I || (I._networkRequestStatusCode && I._networkRequestStatusCode !== 200)) { return } D.profile = I; var J = E.one("#account #name"); var H; H = H || D.profile.name; H = H || D.profile.username; H = H || (D.profile.emails && D.profile.emails.length > 0 && D.profile.emails[0].address); H = H || "Account"; D.profile.display = H; J.setContent(H); var G = E.one("#account"); G.removeClass("sled-loading"); setTimeout(function () { G.one("#account-menu").removeClass("sled-loading") }, 1000); E.fire("sled:checkUncover") } function F() { E.on("sled:renderProfile", function (G) { C(G) }) } F(); q(function () { B(d) }); E.namespace("sled").user = {} }, "1.0.0", { requires: ["sledsledlist", "sledglobal", "slednetwork", "sledcontacts", "node"] }); YUI.add("sledtemplates", function (D) { var H = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]; var R = { minute: 60000, hour: 3600000, day: 86400000 }; var O = ' <div class="edited-by {showEditedBy}">Edited by <em>{editedBy}</em>, {editedTime}</div>'; var Z = ' <div class="message {odd}"><p class="details-meta"><em>{user}</em>, {dateAndTime}:</p><p class="details-content">{content}</p></div>'; var T = ' <span class="tab"></span><span class="check-boxes check {boxChecked}">{boxChecked}</span><span class="notes taskicon {noteClass}"></span><span class="titlearea"><textarea class="titletext tasktitle yui3-hastooltip" wrap=off rows=1>{escapedTitle}</textarea><span class="ellipses">...</span><span class="updatedAgo">{updatedAgo}</span><textarea class="measureText" wrap=off rows=1>{escapedTitle}</textarea></span><span class="iconsright"><span class="iamaparticipant"></span><span class="participants"></span><span class="deleteTask"></span></span><div class="taskdetails"><div>' + O + '</div><div class="messages">{detailsHtml}</div><textarea class="taskdetails" placeholder="Type in detail here"></textarea><a class="addTaskDetail">Add</a><div class="clear: both;"></div></div><div class="bottom-links"><a class="collapseDetails" >Close Details</a><a class="deleteTask">Delete Item</a></div><div class="clearfix"></div>'; var V = ' <li class="task {liChecked} {noteClass} {showDetails} {participantsExtent} {me} {extraClasses}" task={id} {extraAttrs}>' + T + "{extraContent}</li>"; var N = ' <textarea class="titletext tasktitle addnewitem">Click to add a new item</textarea><div class="clearfix"></div>'; var S = ' <li class="addnewtask">' + N + "</li>"; var M = ' <li suggestion="{id}" class="suggestion"><a class="add"><span class="arrow"></span><span class="clickableArrow"></span>{title}</a><a class="removeSuggestion">x</a></li>'; function B(Y) { Y = Y.replace(/</g, "&lt;"); Y = Y.replace(/>/g, "&gt;"); return Y } function K(ae) { var ac = new Date(ae); var ab = new Date(); var af = ab - ac; if (af >= 3 * R.day || af < 0) { return "on " + H[ac.getMonth()] + " " + ac.getDate() } else { if (af >= R.day) { var ag = Math.round(af / R.day); return (ag === 1 ? "yesterday" : ag.toString() + " days ago") } else { if (af >= R.hour) { var Y = Math.round(af / R.hour); return (Y === 1 ? "an hour ago" : Y.toString() + " hours ago") } else { if (af >= R.minute) { var ad = Math.round(af / R.minute); return (ad === 1 ? "a minute ago" : ad.toString() + " minutes ago") } else { return "just now" } } } } } function L(ad, Y, ac, ae, af) { Y.escapedTitle = B(Y.title); Y.extraClasses = ac || ""; Y.extraAttrs = ae || ""; Y.extraContent = af || ""; switch (Y.status) { case "close": Y.boxChecked = "completed"; Y.liChecked = "completed"; break; case "pending": Y.boxChecked = "in-progress"; Y.liChecked = ""; break; case "open": Y.boxChecked = "default"; Y.liChecked = ""; break; default: Y.boxChecked = "default"; Y.liChecked = ""; break } Y.noteClass = Y.detailsModified ? (Y.last >= Y.detailsModified ? "noteContent" : "noteNew") : "noteEmpty"; switch (Y.participantsCount) { case 0: Y.participantsExtent = "none"; break; case 1: Y.participantsExtent = "single"; break; default: Y.participantsExtent = "multiple"; break } Y.me = Y.isMe ? "me" : "not-me"; Y.updatedAgo = (Y.detailsModified && (!Y.last || Y.detailsModified > Y.last)) ? K(Y.detailsModified) : ""; Y.editedByHtml = P(Y); Y.detailsHtml = G(Y); var ab = D.substitute(ad, Y); return ab } function U(Y) { return B(Y) } function P(Y) { Y.showEditedBy = (Y.detailsModifiedBy) ? "" : "remove"; Y.editedBy = (Y.detailsModifiedBy) ? Y.detailsModifiedBy.display.split(" ")[0] : ""; Y.editedTime = (Y.detailsModified) ? K(Y.detailsModified) : ""; Y.editedByHtml = D.substitute(O, Y); return Y.editedByHtml } function G(ab) { var ad, Y; var ae = ""; if (ab.details && ab.details.thread) { var ac = []; for (ad = 0, Y = ab.details.thread.length; ad < Y; ++ad) { if (ad > 0 && ab.details.thread[ad].user.id === ab.details.thread[ad - 1].user.id && (ab.details.thread[ad].created - ab.details.thread[ad - 1].created) <= (10 * R.minute)) { ac[ac.length - 1].content += '<span class="break"></span>' + B(ab.details.thread[ad].content) } else { ac.push({ user: (ab.details.thread[ad].user && ab.details.thread[ad].user.display) ? ab.details.thread[ad].user.display.split(" ")[0] : "Someone", created: K(ab.details.thread[ad].created), content: B(ab.details.thread[ad].content) }) } } for (ad = 0, Y = ac.length; ad < Y; ++ad) { ab.user = ac[ad].user; ab.dateAndTime = ac[ad].created; ab.content = ac[ad].content; ab.odd = (ad % 2 === 0 ? "even" : "odd"); ae += D.substitute(Z, ab) } } return ae } function J(ac) { var Y = "<li>"; var ad, ab; for (ad = 0, ab = ac.length; ad < ab; ad++) { if (ad % 3 === 0) { Y += '<ul class="participants-row"><li>' } Y += '<span class="participant" participant="' + ac[ad].id + '"><span class="person"></span>' + ac[ad].display + "</span>"; if (ad % 3 === 2 || ad === ab - 1) { Y += "</li></ul>" } } Y += "</li>"; return Y } function aa(ad) { var ab = "<li>"; var af, ae, ac; if (ad && ad instanceof Array) { for (af = 0, ae = 0, ac = ad.length; ae < ac; ae++) { var Y = ad[ae]; if (Y.id !== D.sled.gsled.profile.id) { if (af % 3 === 0) { ab += '<ul class="participants-row"><li>' } ab += '<span class="participant" pid="' + Y.id + '"><span class="person"></span>' + Y.display + "</span>"; if (af % 3 === 2 || af === ac - 1) { ab += "</li></ul>" } af++ } } } ab += "</li>"; return ab } function W(ab) { var ac = ""; var ad, Y; if (ab && ab instanceof Array) { for (ad = 0, Y = ab.length; ad < Y; ad++) { ac += '<li><input type="checkbox" participant="' + ab[ad].id + '" id="tp' + ab[ad].id + '"' + (ab[ad].selected ? "checked" : "") + '><label for="tp' + ab[ad].id + '">' + ab[ad].display + "</label></li>" } } ac += ""; return ac } function X(Y) { var ac = Y.isPending ? " diminishedtextitem " : ""; ac += Y.isPID ? " disabledtextitem " : ""; var ad = Y.display; ad += Y.isPending ? " (pending) " : ""; ad += Y.isPid ? " (dummy) " : ""; ad = "<em>" + ad + "</em>"; var ab = '<li><a class="menuitem-content participant ' + ac + '" pid="' + Y.id + '">' + ad + "</a></li>"; return ab } function C(ae, ad) { var ab = ""; ab += (ae.isPending) ? "diminishedtextitem" : ""; var ac = ae.title; ac += ae.isPending ? " (pending) " : ""; var Y = '<li class="menuitem sled" sled="' + ae.id + '"><a class="menuitem-content ' + ab + '"> ' + ac + "</a></li>"; return Y } function F(ac) { var ab = (ac.value) ? "enabled" : ""; var Y = '<li class="menuitem setting" setting="' + ac.id + '"><a class="menuitem-content ' + ab + '">- ' + ac.title + "</a></li>"; return Y } function I(Y) { return L(T, Y) } function E(ab, ah, ad, ae, ag) { var Y; var af = ah && ah.hasClass("open"); ab.showDetails = af ? "open" : ""; ad = ad || ""; ae = ae || ""; ag = ag || ""; ad += ah && ah.hasClass("active") ? "active" : ""; ae += ""; ag += ""; var ac = L(V, ab, ad, ae, ag); return ac } function Q(Y) { return D.substitute(M, Y) } D.namespace("sled.templates"); D.sled.templates = { listAddTaskTemplate: S, taskListHtml: E, suggestionListHtml: Q, taskInnerHtml: I, taskDetailsHtml: G, taskEditedByHtml: P, inviteParticipants: J, manageParticipants: aa, taskParticipants: W, participantMenuItem: X, sledMenuItem: C, settingsMenuItem: F, sledTitle: U, last: null} }, "1.0.0", { requires: ["node", "substitute"] }); YUI.add("sledsled", function (E) { var N = E.sled.gsled; var J; function Q(ab, U) { if (!ab || (ab._networkRequestStatusCode && ab._networkRequestStatusCode !== 200) || !ab.id && !U) { return } E.assert(ab); N.sled = ab; var Y = N.sleds[ab.id]; if (!Y) { Y = ab } if (Y) { N.sleds[Y.id] = ab; N.sleds[Y.index] = ab; ab.index = ab.index || Y.index; ab.requestedDetails = Y.requestedDetails; ab.requestedTasks = Y.requestedTasks; ab.requestedTips = Y.requestedTips; ab.requestedSuggestions = Y.requestedSuggestions; ab.tasks = ab.tasks || Y.tasks; ab.tips = ab.tips || Y.tips; ab.suggestions = ab.suggestions || Y.suggestions; ab.place = ab.place || Y.place; ab.date = ab.date || Y.date; ab.time = ab.time || Y.time; ab.participants = ab.participants || Y.participants; ab.subscribed = Y.subscribed } C(ab); L(ab); if (ab.id === E.sled.initialSledId) { E.sled.initialTasks = E.sled.initialSledId = null } else { D(ab); P(ab); K(ab); if (ab.id) { var X = function (ac, ad) { if (!ac || (ac.status !== "ok")) { } }; var aa = '{"value":"' + ab.id + '"}'; c("storage/activesled", aa, X) } } var T = E.one("#sled-details-bar"); T.removeClass("hidden"); var W = E.one("#sled-participants"); W.removeClass("sled-loading"); setTimeout(function () { W.one("#sled-participants-menu").removeClass("sled-loading") }, 1000); var Z = E.one("#sleds-list"); setTimeout(function () { Z.removeClass("sled-loading") }, 0); setTimeout(function () { Z.one("#sleds-menu").removeClass("sled-loading") }, 1000); var V = E.one("#join-sled"); if (ab.isPending) { V.removeClass("sled-loading") } else { V.addClass("sled-loading") } if (ab.isPending) { E.fire("sled:askJoinCurrentSled", true) } E.fire("sled:checkUncover"); if (E.sled.stream) { E.fire("sled:subscribeSled", ab) } if (E.sled.history) { E.sled.history.hash.replace({ sled: ab.id }) } } function C(ac) { var Y = E.sled.templates.sledTitle(ac.title); var T = E.one("#sled-title-input"); T.set("value", Y); var U = E.one("#sled-title"); U.setContent(Y); var Z = E.one("#sled-details .place"); var ab = E.one("#sled-details .date"); var aa = E.one("#sled-details .time"); var W = ""; var X = ""; var V = ""; if (!ac.requestedDetails && ac.id !== "") { ac.requestedDetails = true; n("sled/" + ac.id, Q) } else { W = ac.place || ""; V = R(ac.date); X = H(ac.time) } if (Z) { Z.set("value", W) } if (ab) { ab.set("value", V) } if (aa) { aa.set("value", X) } } function L(ac) { if (!N.sled.participants || !(N.sled.participants instanceof Array)) { N.sled.participants = [] } var Y = ""; if (ac.participants && ac.participants.length > 0) { var U = E.one("#sled-participants"); var T = E.one("#sleds-menu"); var Z = E.one("#sleds-list #delete-sled"); if (ac.participants[0].id === E.sled.gsled.profile.id) { Z.removeClass("sled-loading"); if (ac.participants.length > 1) { U.one(".launch-manage-menu-item").removeClass("sled-loading") } else { U.one(".launch-manage-menu-item").addClass("sled-loading") } T.one(".leave-sled-menu-item").addClass("sled-loading") } else { Z.addClass("sled-loading"); T.one(".leave-sled-menu-item").removeClass("sled-loading"); U.one(".launch-manage-menu-item").addClass("sled-loading") } var W, V; for (W = 0, V = ac.participants.length; W < V; ++W) { var aa = ac.participants[W]; ac.participants[aa.id] = aa; Y += E.sled.templates.participantMenuItem(aa) } var ab = E.one("#participants-count"); ab.setContent(ac.participants.length); if (ac.participants.length > 1) { U.addClass("multi-participants") } else { U.removeClass("multi-participants") } if (ac.participants.length > 9) { ab.addClass("two-digits") } else { ab.removeClass("two-digits") } } var X = E.all("#participants"); X.setContent(Y) } function D(T) { if (!T.requestedTasks && T.id && T.id !== "") { T.requestedTasks = true; n("sled/" + T.id + "/tasks", function (V, U) { E.fire("sled:renderTasks", V, U) }, T.id) } else { E.fire("sled:renderTasks", T.tasks, T.id) } } function P(T) { if (!T.requestedTips && T.id && T.id !== "") { T.requestedTips = true; n("sled/" + T.id + "/tips", function (U, V) { E.fire("sled:renderTips", U, V) }, T.id) } else { E.fire("sled:renderTips", T.tips, T.id) } } function K(T) { if (!T.requestedSuggestions && T.id && T.id !== "") { T.requestedSuggestions = true; n("sled/" + T.id + "/suggestions", function (U, V) { E.fire("sled:renderSuggestions", U, V) }, T.id) } else { E.fire("sled:renderSuggestions", T.suggestions, T.id) } } function I(T) { if (Object.prototype.toString.call(T) !== "[object Date]") { return false } return !isNaN(T.getTime()) } function G(U) { var T; if (I(U)) { T = U.getFullYear() + "-" + ((U.getMonth() + 1) >= 10 ? (U.getMonth() + 1) : ("0" + (U.getMonth() + 1))) + "-" + ((U.getDate() >= 10) ? (U.getDate()) : ("0" + (U.getDate()))) } return T } function R(U) { var V = new Date(U); var T; if (I(V)) { T = (V.getMonth() + 1) + "/" + V.getDate() + "/" + V.getFullYear() } else { T = "" } return T } function M(U) { var V = new Date("1/1/1970 " + U.replace(/am/, " am").replace(/pm/, " pm")); var T; if (U && I(V)) { T = V.toString().replace(/Thu Jan 01 1970 /, "").replace(/ GMT.*/, "") } return T } function H(W) { if (!W) { return "" } var X = new Date("1/1/1970 " + W.replace(/am/, " am").replace(/pm/, " pm")); var U = []; var T = ""; if (I(X)) { U[0] = X.getHours(); U[1] = X.getMinutes(); U[2] = X.getSeconds() } if (I(X)) { var V = U[1] > 9 ? " " + U[1] : "0" + U[1]; if (U[0] === 0) { T = U[0] + 12 + ":" + V + " am" } else { if (U[0] === 12) { T = U[0] + ":" + V + " pm" } else { if (U[0] > 12) { T = U[0] - 12 + ":" + V + " pm" } else { T = U[0] + ":" + V + " am" } } } } return T } function F(aa) { var X = N.sled; var U = E.one("#sled-details .date"); var V; if (aa === "") { V = aa } else { if (typeof aa === "string") { V = G(new Date(aa)) } else { V = G(aa) } } if (V === X.date) { } else { if (V && !I(aa) && V !== "") { U.set("value", R(X.date)) } else { var T = function (ac, ae) { if (ac.status === "ok") { X.date = V || "" } else { var ab = E.one("#sled-details .date"); var ad = R(X.date); ab.set("value", ad) } }; var Z = { date: V }; var W = JSON.stringify(Z); c("sled/" + X.id, W, T) } } var Y = R(aa); U.set("value", Y) } function B(W, V) { function U() { function X(Y, Z) { if (Y.status === "ok") { delete E.sled.gsled.sled.isPending; delete E.sled.gsled.sled.participants[E.sled.gsled.profile.id].isPending; E.fire("sled:renderSleds", E.sled.gsled.sleds, true); E.fire("sled:statusMessage", "Joined sled"); if (V) { V() } } else { E.fire("sled:errorMessage", "Error joining sled " + JSON.stringify(Y)) } } c("sled/" + E.sled.gsled.sled.id + "/join", null, X) } function T() { } if (!W) { U() } else { E.fire("sled:confirm", "Join this sled?", "Joining allows you to make changes. You can always leave later.", U, null, T, null) } } function S() { var ad = E.one("#sled-title-input-overlay"); var X = E.one("#sled-title"); var V = E.one("#sled-title-input"); J = new E.Overlay({ srcNode: ad, zIndex: 100, visible: false, plugins: [E.Plugin.OverlayModal, E.Plugin.OverlayKeepaligned, { fn: E.Plugin.OverlayAutohide, cfg: { focusedOutside: false}}] }); J.render(); X.on("click", function () { var ai = X.getComputedStyle("width"); ai = parseInt(ai, 10) - 10; ai = ai + "px"; V.setStyle("width", ai); J.set("align", { node: "#sled-title", points: [E.WidgetPositionAlign.LC, E.WidgetPositionAlign.LC] }); V.set("value", E.sled.gsled.sled.title); J.show(); V.focus() }); V.on("focus", function () { setTimeout(E.bind(V.select, V), 100) }); V.on("blur", function (al) { J.hide(); var ak = N.sled; var am = V.get("value"); if (!am) { V.set("value", ak.title); return } X.setContent(am); var ai = '{"title":"' + am + '"}'; function aj(an, ao) { if (an.status === "ok") { ak.title = am; ak.rev = an.rev; E.fire("sled:renderSleds", N.sleds, false) } else { X.setContent(ak.title); V.set("value", ak.title) } } c("sled/" + ak.id, ai, aj) }); V.on("keydown", function (aj) { if (aj.keyCode === 13) { V.blur() } if (aj.keyCode === 27) { var ai = N.sled; V.set("value", ai.title); V.blur() } }); var af = E.one("#sled-details .date"); af.on("focus", function (aj) { if (!E.sled.sled.calendar) { O() } var ai = N.sled.date ? new Date(N.sled.date) : new Date(); E.sled.sled.calendar.render({ selected: ai, date: ai }); setTimeout(E.bind(af.select, af), 0) }); af.on("blur", function (aj) { var ai = N.sled; var ak = af.get("value"); F(ak) }); af.on("keydown", function (aj) { var ai = N.sled; if (aj.keyCode === 13) { af.blur(); E.sled.sled.calendar.hide() } if (aj.keyCode === 27) { af.set("value", R(ai.date)); af.blur(); E.sled.sled.calendar.hide() } }); var U = E.one("#sled-details .time"); function Z(aj) { var ai = U._node; if (ai.selectionStart === 0 && ai.selectionEnd === 0) { setTimeout(E.bind(U.select, U), 100) } } U.on("focus", Z); U.on("click", Z); function aa(ao) { var am = N.sled; var ai = U.get("value"); var al = M(ai); var aj = H(al); var ap = { time: "" }; if (ai && al) { ap = { time: al} } else { ap = { time: ""} } function an(aq, ar) { if (aq.status === "ok") { am.time = al } else { aj = H(am.time); U.set("value", aj) } } var ak = JSON.stringify(ap); c("sled/" + am.id, ak, an); U.set("value", aj) } function ab(aj) { function ai() { aa(aj) } setTimeout(ai, 100) } U.on("blur", ab); U.on("keydown", function (aj) { var ai = N.sled; if (aj.keyCode === 13) { U.blur() } if (aj.keyCode === 27) { U.set("value", H(ai.time)); U.blur() } }); var Y = E.one("#sled-details .place"); Y.on("focus", function (ai) { setTimeout(E.bind(ai.currentTarget.select, ai.currentTarget), 100) }); function T(an) { var am = N.sled; var al = Y.get("value"); var aj = al || ""; var ak = '{"place":"' + al + '"}'; function ai(ao, ap) { if (ao.status === "ok") { am.place = al } else { aj = am.place || ""; Y.set("value", aj) } } c("sled/" + am.id, ak, ai) } N.onPlaceHandler = Y.on("blur", T); var ae = E.one("#sled-details .place"); ae.on("keydown", function (aj) { if (aj.keyCode === 13) { ae.blur() } if (aj.keyCode === 27) { var ai = N.sled; ae.set("value", ai.place || ""); ae.blur() } }); var ah = E.one("#account-menu #logout"); if (ah) { ah.on("click", function (ai) { window.location = postmile.api.uri + "/logout" }) } var ac = E.one("#account-menu #accountsettings"); if (ac) { ac.on("click", function (ai) { window.location = postmile.api.uri + "/account" }) } var W = E.one("#account-menu #guidedtour"); if (W) { W.on("click", function (ai) { E.fire("sled:launchTour") }) } var ag = E.one("#account-menu #mysettings"); if (ag) { ag.on("click", function (ai) { function aj(ak) { } s("storage/settings", null, aj) }) } E.on("sled:askJoinCurrentSled", function (ai) { B(ai) }); E.on("sled:renderSled", function (ai, aj) { Q(ai, aj) }); E.on("sled:renderSledParticipants", function (ai) { L(ai) }) } function O() { E.sled.sled.calendar = new E.Calendar("date", {}); E.sled.sled.calendar.on("select", function (T) { E.sled.sled.setDate(T) }) } E.namespace("sled.sled"); E.sled.sled = { setDate: F, last: null }; S() }, "1.0.0", { requires: ["sledglobal", "slednetwork", "node"] }); YUI.add("sledsledlist", function (G) { var F = G.sled.gsled; function C(R, J) { var M, K; if (!R || (R._networkRequestStatusCode && R._networkRequestStatusCode !== 200)) { return } F.sleds = R; var N = ""; var P = F.sled; for (M = 0, K = R.length; M < K; ++M) { var Q = R[M]; Q.index = M; F.sleds[Q.id] = Q; if (!P && (!F.activeSledId || Q.id === F.activeSledId)) { P = Q } N += G.sled.templates.sledMenuItem(Q, P) } N += ""; if (!P) { P = F.sleds[0] } var L = G.one("#sleds"); L.setContent(N); if (initialSledId && initialSled) { F.sleds[initialSledId] = initialSled; for (M = 0, K = F.sleds.length; M < K; ++M) { if (F.sleds[M].id === initialSled.id) { F.sleds[M] = initialSled; F.sleds[M].index = M } } } if (J) { if (P) { G.fire("sled:renderSled", P) } else { E() } } else { } var O = G.one("#sleds-list"); setTimeout(function () { O.removeClass("sled-loading") }, 0); setTimeout(function () { O.one("#sleds-menu").removeClass("sled-loading") }, 1000); if (P) { I(P.id) } if (G.sled.dnd) { G.sled.dnd.sledsDnd() } G.fire("sled:checkUncover") } function I(K) { if (G.sled.settings && G.sled.settings.sledsReorder()) { return null } var J = G.one("#sleds-list #sleds"); sledMenuAnchors = J.all(".sled a"); sledMenuAnchors.removeClass("sled-loading"); selectedSledMenuLink = J.one('li[sled="' + K + '"]'); selectedSledMenuAnchor = selectedSledMenuLink.one("a"); selectedSledMenuAnchor.addClass("sled-loading") } function E() { var M = { id: "", title: "Name your new sled", participants: [], tasks: [] }; F.sleds.unshift(M); G.fire("sled:renderSled", M, true); var L = G.one("#sleds-menu"); L.addClass("menu-hidden"); function J(N, O) { if (N.status === "ok") { M.rev = N.rev; M.id = N.id; F.sleds[M.id] = M; if (!M.requestedSuggestions && M.id !== "") { M.requestedSuggestions = true; n("sled/" + M.id + "/suggestions", function (P, Q) { G.fire("sled:renderSuggestions", P, Q) }, M.id) } else { G.fire("sled:renderSuggestions", M.suggestions, M.id) } if (!M.requestedTips && M.id !== "") { M.requestedTips = true; n("sled/" + M.id + "/tips", function (P, Q) { G.fire("sled:renderTips", P, Q) }, M.id) } else { G.fire("sled:renderTips", M.tips, M.id) } C(F.sleds, false); document.location.href = document.location.href.split("#")[0] + "#sled=" + M.id } else { } } var K = '{"title":"' + M.title + '"}'; x("sled", K, J) } function B(L) { var Q = L.get("nextSibling"); var P = F.sleds.length; if (Q) { var N = Q.getAttribute("sled"); if (N) { var O = F.sleds[N]; P = O.index } } var J = L.getAttribute("sled"); var R = F.sleds[J]; var M = R.index; if (M < P) { P-- } if (R.index !== P) { var K = function (T, W) { if (T.status === "ok") { var U = F.sleds.splice(M, 1); F.sleds.splice(P, 0, U[0]); if (F.sleds) { var V, S; for (V = 0, S = F.sleds.length; V < S; ++V) { var X = F.sleds[V]; X.index = V; G.assert(F.sleds[X.id] === X) } } G.fire("sled:statusMessage", "Sled reordered") } else { C(F.sleds, false); G.fire("sled:errorMessage", "Sled reorder failed") } }; c("sled/" + R.id + "?position=" + P, "", K) } } function D(N) { var M, K, J; function L(P, R) { if (P.status === "ok") { for (M = 0; M < F.sleds.length; M++) { if (F.sleds[M].id === N) { F.sleds.splice(M, 1) } } delete F.sleds[N]; if (F.sleds) { for (K = 0, J = F.sleds.length; K < J; ++K) { var T = F.sleds[K]; T.index = K; G.assert(F.sleds[T.id] === T) } } var S = G.one('#sleds-list #sleds .sled[sled="' + N + '"]'); if (S) { var O = S.next(); if (!O) { var U = S.ancestor().one("*"); if (U !== S) { O = U } } if (!O) { E() } else { var V = O.getAttribute("sled"); var Q = F.sleds[V]; G.fire("sled:renderSled", Q) } S.remove() } } else { G.fire("sled:inform", "Error", "Failed to delete sled.") } } s("sled/" + N, null, L) } function H() { var M = G.one("#sleds-list #delete-sled"); M.on("click", function (O) { G.fire("sled:confirm", "Delete sled?", "Deleting the sled will remove all the items and details. This change will delete the sled for all participants and it is permanent.", D, F.sled.id) }); var J = G.one(".leave-sled"); J.on("click", function (P) { var O = G.one("#sled-participants-menu"); O.addClass("menu-hidden"); G.fire("sled:confirm", "Leave this Sled?", "You will not be able to join unless invited back by another participant.", D, F.sled.id) }); var N = G.one("#sleds-list #join-sled"); N.on("click", function (O) { G.fire("sled:askJoinCurrentSled", true) }); var L = G.one("#sleds-list #newsled"); L.on("click", E); var K = G.one("#sleds-list #sleds"); K.delegate("click", function (P) { var Q = P.currentTarget.getAttribute("sled"); var O = F.sleds[Q]; G.fire("sled:renderSled", O); I(O.id); G.one("#sleds-menu").addClass("menu-hidden"); G.one("#sleds-menu").previous().removeClass("menu-label-menuvisible"); G.one("#sleds-menu").previous().removeClass("menu-label-active") }, ".sled"); G.on("sled:renderSleds", function (O, P) { C(O, P) }); G.on("sled:sledReorder", function (O) { B(O) }) } G.namespace("sled").sledlist = {}; H() }, "1.0.0", { requires: ["sledglobal", "slednetwork", "sledsledlist", "node"] }); YUI.add("sledtasklist", function (D) { var T = D.sled.gsled; var W = D.one("#tasks"); var K = -1; var L = [{ css: "default", api: "open", ui: "open" }, { css: "in-progress", api: "pending", ui: "pending" }, { css: "completed", api: "close", ui: "closed"}]; function V(ap, at) { if (!ap || (ap._networkRequestStatusCode && ap._networkRequestStatusCode !== 200)) { } if (T && T.sleds) { var av = T.sleds[at]; if (av) { av.tasks = ap } } var ar = ""; if (ap) { var aq, an; for (aq = 0, an = ap.length; aq < an; ++aq) { var Y = ap[aq]; Y.index = aq; ap[Y.id] = Y; ar += D.sled.templates.taskListHtml(Y) } } ar += ""; try { taskNodes = W.all(">li"); taskNodes.remove() } catch (ao) { } W.setContent(ar); var au = W.all("li"); au.each(aj); U(W); O(); timeLog("done rendering tasks ") } function P(ar) { var ax = ar.one(".measureText"); var av = ar.one(".tasktitle"); if (ax && av) { ax.set("value", av.get("value")); var an = ar.one(".titlearea"); var aw = ax.get("scrollWidth"); var ao = parseInt(an.getStyle("width")); var aq = parseInt(ar.getStyle("width")); var at = aq - 84 - 5; var Y = at - 36 - 5; var ap = ar.hasClass("editing"); var au = ar.hasClass("open"); if (false) { } else { if (au) { if (aw < Y || ao < at || ap) { av.setAttribute("rows", "1"); av.setAttribute("wrap", "off") } else { av.setAttribute("rows", ""); av.setAttribute("wrap", "") } ar.removeClass("long-title"); ar.addClass("short-title"); av.setStyle("width", (aw) + "px") } else { if (ap) { ar.removeClass("long-title"); ar.addClass("short-title"); av.setStyle("width", "") } else { if (aw < Y || ao < at || ap) { ar.removeClass("long-title"); ar.addClass("short-title"); av.setStyle("width", (aw) + "px") } else { ar.removeClass("short-title"); ar.addClass("long-title"); av.setStyle("width", "") } } } } an.setStyle("width", (at) + "px"); av.setStyle("width", (Y) + "px") } } function aj(au, at) { var ar = au.one(".tasktitle"); var ap = au.one(".updatedAgo"); var ao = au.one(".measureText"); if (ar && ap && ao) { var aq = ap.getStyle("display"); ao.set("value", ar.get("value")); au.removeClass("updatedago-would-wrap"); var Y = ar.getX(); var an = ao.get("scrollWidth"); ap.setX(Y + an) } P(au); if (at) { O() } } function O() { if (D.sled.dnd && D.sled.dnd.tasksDndDelegate) { D.sled.dnd.tasksDndDelegate.syncTargets() } if (D.sled.tooltips && D.sled.tooltips.tasktip) { D.sled.tooltips.tasktip.set("triggerNodes", ".yui3-hastooltip"); D.sled.tooltips.tasktip.syncUI() } } function G(ap) { var at = T.sled.id; var ay = T.sleds[at]; var aq = ay.tasks; var aw = ap.get("nextSibling"); var av = aq.length; if (aw) { var ar = aw.getAttribute("task"); if (ar) { var au = aq[ar]; av = au.index } } var Y = ap.getAttribute("task"); var an = aq[Y]; var ao = an.index; if (ao < av) { av-- } if (an.index !== av) { var ax = function (aB, aE) { if (aB.status === "ok") { var aC = aq.splice(ao, 1); aq.splice(av, 0, aC[0]); if (aq) { var aD, az; for (aD = 0, az = aq.length; aD < az; ++aD) { var aA = aq[aD]; aA.index = aD; D.assert(aq[aA.id] === aA) } } D.fire("sled:statusMessage", "Item reordered") } else { D.fire("sled:renderSled", D.sled.gsled.sled); D.fire("sled:errorMessage", "Item reorder failed") } }; c("task/" + an.id + "?position=" + av, "", ax) } } function U(an) { var Y = D.sled.templates.listAddTaskTemplate; if (!an) { an = D.one("#tasks") } an.append(Y); var ao = an.one(".addnewtask"); ao.removeClass("yui3-dd-drop") } function aa(ao) { var at = T.sled.id; var ap = T.sled.tasks; var au = T.sled.suggestions; var Y = ao.getAttribute("suggestion"); var az = au[Y]; var ax = ao.get("nextSibling"); var aw = ap.length; if (ax) { var aq = ax.getAttribute("task"); if (aq) { var av = ap[aq]; aw = av.index } } var ay = az.title; var an = { title: ay, participantsCount: 0 }; var ar = D.sled.templates.taskInnerHtml(an); ao.setContent(ar); aj(ao, true); H(az, T.sled, ap, an, aw, ao) } function X(aq) { var at = T.sled.id; var ap = T.sled.tasks; var au = aq.title; var ao = { title: au, participantsCount: 0 }; var ar = D.sled.templates.taskListHtml(ao); var av = D.Node.create(ar); var an = D.one("#tasks"); var Y = an.one("li:last-child"); Y.insertBefore(av, Y); aj(av, true); ak(av); H(aq, T.sled, ap, ao, ap.length, av) } function H(an, aq, at, Y, ao, ap) { function ar(au, av) { if (au.status === "ok") { Y.rev = au.rev; Y.id = au.id; Y.index = ao; at.splice(ao, 0, Y); at[Y.id] = Y; ap.setAttribute("task", Y.id); D.fire("sled:statusMessage", "Suggestion added") } else { D.fire("sled:renderSled", aq); D.fire("sled:errorMessage", "Suggestion add failed") } } x("sled/" + aq.id + "/task?suggestion=" + an.id + "&position=" + ao, "", ar); O() } function af(ao, Y) { Y.details = ao; var an = D.sled.templates.taskDetailsHtml(Y); Y.liDetailsTextTarget.setContent(an); an = D.sled.templates.taskEditedByHtml(Y); Y.liEditedByTarget.setContent(an) } function N(Y) { Y.setStyle("height", "5px") } function ah(ap) { var ao = ap.get("scrollHeight"); var Y = parseInt(ap.getStyle("padding-top")); var an = parseInt(ap.getStyle("padding-bottom")); ap.setStyle("height", (ao - Y - an) + "px") } function al(Y) { N(Y); ah(Y) } function ag() { var Y = W.all("li"); Y.removeClass("open"); Y.removeClass("active"); Y.removeClass("participantsMenu"); var an = W.all(".tasktitle"); an.setStyle("white-space", "nowrap"); an.setAttribute("rows", "1"); an.setAttribute("wrap", "off") } function M(at, aq) { var ao = D.one("#tasks"); var av = ao.get("scrollTop"); var aw = ao.get("scrollHeight"); var az = ao.get("clientHeight"); var au = ao.getXY()[1]; var an = parseInt(at.getStyle("height"), 10); var ap = at.getXY()[1]; var ay = au + az; var ar = ap + an; if (ar > ay || (ap < au && an > az)) { var ax = ar - ay; var Y = av + ax; ai(Y) } else { if (ap < au) { var ax = au - ap; var Y = av - ax; ai(Y) } } } function ak(ao) { var an = D.one("#tasks"); var Y = an.get("scrollHeight"); var ap = an.get("clientHeight"); var aq = Y - ap; ai(aq) } function ai(ap) { var Y = D.one("#tasks"); var an = Y.get("scrollTop"); var ao = new D.Anim({ node: Y, to: { scrollTop: ap} }); var aq = Math.abs(ap - an) / 1000 + 0.1; ao.set("duration", aq); ao.set("easing", D.Easing.easeOut); ao.run(); ao.on("end", function () { }) } function J(aw) { var at = aw.currentTarget.ancestor("li", true); var ay = at.getAttribute("task"); var ap = T.sled.tasks[ay]; var ar = at.one(".tasktitle"); var Y = ar; var an = at.one("div.messages"); var ao = an; var aA = at.one("div.edited-by").ancestor(); var av = at.hasClass("open"); if (!aw.target.test("li") && !aw.target.test(".taskicon") && !aw.target.test(".collapseDetails")) { return } if (!ap) { return } if (Y) { if (aw.target === Y) { return } else { Y.blur() } } ap.liDetailsTextTarget = ao; ap.liEditedByTarget = aA; ap.last = ap.detailsModified + 1; var ax = at.one(".taskicon"); if (ax && ax.hasClass("noteNew")) { ax.removeClass("noteNew"); ax.addClass("noteContent") } if (at && at.hasClass("noteNew")) { at.removeClass("noteNew"); at.addClass("noteContent") } at.one(".updatedAgo").setContent(""); if (!D.sled.settings || !D.sled.settings.multipleDetails()) { ag() } at.addClass("active"); var az = at.one(".tasktitle"); if (!av) { function au(aC, aB) { if (aC && aC._networkRequestStatusCode === 200) { af(aC, aB); setTimeout(function () { M(at, "post") }, 10); var aD = at.one("textarea.taskdetails"); aB.liDetailsInputTarget = aD; aD.focus() } else { } } if (!ap.requestedDetails && ay !== "") { ap.requestedDetails = true; n("task/" + ay + "/details", au, ap) } else { au(ap.details, ap) } at.addClass("open"); if (az) { az.setStyle("white-space", "normal"); az.setAttribute("rows", ""); az.setAttribute("wrap", "") } else { } } else { at.removeClass("open"); az.setStyle("white-space", "nowrap"); az.setAttribute("rows", "1"); az.setAttribute("wrap", "off") } function aq(aB, aC) { if (aB.status === "ok") { ap.last = ap.detailsModified + 1 } else { } } aj(at); c("task/" + ap.id + "/last", "", aq) } function ac(ar) { var au = ar.currentTarget; var aq = au.get("value"); setTimeout(function () { al(au) }, 0); setTimeout(function () { M(ap) }, 0); if (!aq) { return } var Y = { type: "text", content: aq }; var av = JSON.stringify(Y); Y.user = { id: T.profile.id, display: T.profile.name }; Y.created = new Date().getTime(); var ap = au.ancestor("li"); var at = ap.getAttribute("task"); var an = T.sled.tasks[at]; au.set("value", ""); function ao(ax, ay) { if (ax.status === "ok") { an.rev = ax.rev; an.details.thread[an.details.thread.length] = Y; var aA = ap.one(".taskicon"); aA.removeClass("noteNew"); aA.removeClass("noteContent"); aA.removeClass("noteEmpty"); ap.removeClass("noteNew"); ap.removeClass("noteContent"); ap.removeClass("noteEmpty"); var az = an.details.thread.length ? "noteContent" : "noteEmpty"; aA.addClass(az); ap.addClass(az); an.liDetailsInputTarget.focus(); an.detailsModified = ((new Date()).getTime()); an.detailsModifiedBy = Y.user; an.last = an.detailsModified + 1; af(an.details, an); D.fire("sled:statusMessage", "Details added"); var aw = function (aB, aC) { if (aB.status === "ok") { an.last = an.detailsModified + 1 } else { } }; c("task/" + an.id + "/last", "", aw) } else { D.fire("sled:errorMessage", "Addition to details failed") } } c("task/" + an.id + "/detail", av, ao) } function Z(ap, ao) { var ar = ap.one(".check"); var at = ap.getAttribute("task"); var Y = T.sled.tasks[at]; var an; var av; for (av = 0; av < L.length; av++) { var aq = L[av].css; var au = (av + 1) % L.length; if (ar.hasClass(aq)) { ao = (typeof ao === "undefined") ? au : ao; an = av } ar.removeClass(aq) } ar.addClass(L[ao].css); Y.status = L[ao].api; if (L[ao].css === "completed") { ap.addClass("completed") } else { ap.removeClass("completed") } return { oldState: an, newState: ao} } function am(at) { var au = at.currentTarget.ancestor("li", true); var ar = au.one(".check"); var ap = au.getAttribute("task"); var an = T.sled.tasks[ap]; var aq = Z(au); var ao = '{"status":"' + an.status + '"}'; au.addClass("active"); function Y(av, aw) { if (av.status === "ok") { D.fire("sled:statusMessage", "Task " + L[aq.newState].ui) } else { Z(au, aq.oldState); D.fire("sled:errorMessage", "Task check failed") } } c("task/" + an.id, ao, Y) } function R(Y) { if (D.sled.settings.confirmDelete()) { D.fire("sled:confirm", "Delete item?", "This will permanently delete the item and all its details.", C, Y) } else { C(Y) } } function C(ar) { var aq = ar.currentTarget; var au = aq.ancestor("li", true); var ap = au.getAttribute("task"); var at = T.sled.tasks; var an = T.sled.tasks[ap]; var Y = new D.Anim({ node: au, to: { opacity: 0} }); Y.set("duration", 0.75); Y.set("easing", D.Easing.easeOut); Y.run(); Y.on("end", function () { var aw = W.one(".active"); if (!aw) { var av = au.next() } au.remove() }); function ao(aw, ay) { if (aw.status === "ok") { an.rev = aw.rev; delete at[an.id]; at.splice(an.index, 1); if (at) { var ax, av; for (ax = 0, av = at.length; ax < av; ++ax) { at[ax].index = ax } } D.fire("sled:statusMessage", "Item deleted") } else { D.fire("sled:renderSled", D.sled.gsled.sled); D.fire("sled:errorMessage", "Item deletion failed") } } s("task/" + an.id, null, ao) } function E(aq) { var au = T.sled; var ao = au.tasks; var ap = aq.currentTarget.ancestor("li", true); var ar = ap.getAttribute("task"); var an = T.sled.tasks[ar]; var av = D.one("#tasks"); var Y = av.getY() + parseInt(av.getComputedStyle("height"), 10); if (D.sled.contacts) { var at = D.sled.contacts.toggleTaskParticipants(aq.currentTarget, an, Y); if (at) { ap.addClass("participantsMenu") } else { ap.removeClass("participantsMenu") } } } function F(ap) { var aq = ap.currentTarget.ancestor("li", true); var ao = aq.getAttribute("task"); var an = null; if (T.sled && T.sled.tasks && ao) { an = T.sled.tasks[ao] } aq.addClass("active"); if (an && !an.participants) { var Y = function (ar, at) { if (ar._networkRequestStatusCode === 200) { an.created = ar.modified; an.modified = ar.created; an.participants = ar.participants || []; an.sled = ar.sled; an.status = ar.status; an.title = ar.title } else { } }; n("task/" + an.id, Y) } } function ae(aq) { var at = aq.currentTarget.ancestor("li", true); var Y = at.one(".tasktitle"); var ap = at.getAttribute("task"); var an; var ao; var ar; if (Y) { an = Y; ao = at.hasClass("open") } if (D.sled.contacts) { ar = D.sled.contacts.isTaskParticipantsOpen(ap) } if (!(an && an._node === document.activeElement) && (!ao) && (!ar)) { at.removeClass("active") } } function B(Y) { aj(Y.currentTarget.ancestor("li", true)) } function ad(at) { var aA = T.sled; var aq = at.currentTarget.ancestor("li", true); if (!aq) { return } var au = aq.getAttribute("task"); var ao = null; var ap = aq.one(".tasktitle"); var an = ap; var ax = an.get("value"); var az = '{"title":"' + ax + '"}'; var aw = W.all("li"); if (!aq.hasClass("open")) { aw.removeClass("active") } aw.removeClass("editing"); if (au) { ao = T.sled.tasks[au] } if (ao) { wasTitle = ao.title } else { if (!ax || K === 27) { D.one("#tasks").all(".addnewtask").remove(true); U(W); aq = null } } if (aq) { if (!ao) { ao = { title: ax, participantsCount: 0} } var ay = ao.title; ao.title = ax; var ar = D.sled.templates.taskInnerHtml(ao); ao.title = ay; aq.setContent(ar); aj(aq, true); var Y = function (aB, aC) { if (aB.status === "ok") { ao.rev = aB.rev; ao.title = ax; if (!ao.id) { ao.id = aB.id; aq.setAttribute("task", ao.id); aA.tasks[ao.id] = ao } D.fire("sled:statusMessage", "Task " + (au ? "changed" : "added")) } else { ar = D.sled.templates.taskInnerHtml(ao); aq.setContent(ar); aj(aq, true); D.fire("sled:errorMessage", "Task " + (au ? "change" : "add") + " failed") } }; if (!au) { var av = function (aB, aD) { if (aB.status === "ok") { ao.index = aA.tasks.length; aA.tasks[aA.tasks.length] = ao; aq.removeClass("addnewtask"); aq.addClass("task"); U(W); aq.removeClass("active"); var aC = W.one(".addnewtask"); if (K === 13) { Q({ currentTarget: aC }) } Y(aB, aD); O() } else { D.one("#tasks").all(".addnewtask").remove(true); U(W); V(aA.tasks, aA.id); D.fire("sled:errorMessage", "Task " + (au ? "change" : "add") + " failed") } }; x("sled/" + aA.id + "/task", az, av) } else { if (ax && ax !== ay) { c("task/" + ao.id, az, Y) } } } O() } function S() { var ap; var ar; var ao; var aq; var au; var at; var ax; function ay(az) { if (aq) { aq.detach() } aq = D.on("selectstart", aw, "body"); au = 0 } function aw(az) { window.getSelection().empty(); if (au++ > 3) { if (aq) { aq.detach() } aq = null } } function av(az) { if (ao) { ao.detach() } ao = W.delegate("mousemove", Y, "li .tasktitle"); at = az; ax = [az.clientX, az.clientY] } function an(az) { dragging = 0; if (ao) { ao.detach() } ao = null } function Y(az) { if (Math.abs(ax[1] - az.clientY) > 5 && !window.getSelection().toString()) { if (at) { var aA = az.currentTarget.ancestor("li", true); ay(); aA.simulate("mousedown", { clientX: at.clientX, clientY: at.clientY }); at = null; if (ao) { ao.detach() } ao = null } } } ap = W.delegate("mousedown", av, "li .tasktitle"); ar = W.delegate("mouseup", an, "li .tasktitle") } function ab(aq) { var ap = T.sled; var ar = aq.currentTarget.ancestor("li", true); var an = ar.one(".tasktitle"); var ao = ar.getAttribute("task"); var Y = null; if (aq.target.get("tagName").toLowerCase() === "li") { document.activeElement.blur() } } function Q(at) { var aq = T.sled; var au = at.currentTarget.ancestor("li", true); var an = au.one(".tasktitle"); var ap = au.getAttribute("task"); var Y = null; var ao = an; var ar = window.getSelection(); if (ar.toString() && an.contains(ar.anchorNode)) { return } if (ap) { Y = T.sled.tasks[ap] } au.addClass("active"); au.addClass("editing"); aj(au, true); if (ao && at.type === "click" && at.target === ao) { return } else { ao = an; ao.focus(); D.sled.uiutils.setCursor(ao, 999) } } function I() { function Y(at) { at.currentTarget.removeClass("addnewitem"); K = at.keyCode; if (at.keyCode === 13) { at.currentTarget.blur() } if (at.keyCode === 27) { var au = at.currentTarget.ancestor("li", true); var ar = au.getAttribute("task"); var aq = T.sled.tasks[ar]; if (aq) { at.currentTarget.set("value", aq.title) } at.currentTarget.blur() } } W.delegate("keydown", Y, ".tasktitle"); W.delegate("click", Q, ".titlearea"); W.delegate("click", Q, ".addnewtask"); W.delegate("click", am, ".check"); W.delegate("click", E, ".participants"); W.delegate("click", R, ".deleteTask"); W.delegate("hover", F, ae, "li"); W.delegate("click", J, ".taskicon"); W.delegate("click", ab, "li"); W.delegate("click", J, ".collapseDetails"); function ap(aq) { if (aq.keyCode === 13) { if (!aq.shiftKey) { setTimeout(function () { ac(aq) }, 0) } } if (aq.keyCode === 27) { aq.currentTarget.set("value", "") } if (aq.keyCode === 8 || aq.keyCode === 127 || aq.keyCode === 27) { setTimeout(function () { al(aq.currentTarget) }, 0) } else { setTimeout(function () { ah(aq.currentTarget) }, 0) } } W.delegate("keyup", ap, ".taskdetails textarea"); function an(ar) { var aq = ar.currentTarget; setTimeout(function () { al(aq) }, 0) } W.delegate("focus", an, ".taskdetails textarea"); function ao(aq) { aq.currentTarget = aq.currentTarget.ancestor().one("textarea.taskdetails"); ac(aq) } W.delegate("click", ao, ".addTaskDetail"); W.delegate("focus", function (aq) { aq.currentTarget.set("value", ""); aq.currentTarget.removeClass("addnewitem") }, ".addnewitem"); W.delegate("blur", function (aq) { ad(aq) }, ".tasktitle"); W.delegate("keyup", function (aq) { B(aq) }, ".tasktitle"); S(); D.on("sled:dropSuggestion", function (aq) { aa(aq) }); D.on("sled:addSuggestion", function (aq) { X(aq) }); D.on("sled:taskReorder", function (aq) { G(aq) }); D.on("sled:renderTasks", function (ar, aq) { V(ar, aq) }) } D.namespace("sled.tasklist"); D.sled.tasklist = { showUpdatedAgo: aj }; I() }, "1.0.0", { requires: ["sledglobal", "sledtemplates", "sledsuggestionlist", "sledsettings", "sleddnd", "event-key", "node", "anim"] }); YUI.add("sledcontacts", function (D) { var Q = D.sled.gsled; var P; var G; function M(Z) { if (Z && (Z._networkRequestStatusCode && Z._networkRequestStatusCode === 200)) { Q.contacts = Z; var Y, X; for (Y = 0, X = Q.contacts.length; Y < X; ++Y) { var W = Q.contacts[Y]; Q.contacts[W.id] = W; Q.contacts[W.id].selected = false } R() } else { } } function R() { var W = D.sled.templates.inviteParticipants(Q.contacts); var X = D.one("#invite-overlay"); X.all(".participant").removeClass("selected"); var aa, Y; for (aa = 0, Y = Q.contacts.length; aa < Y; ++aa) { var ac = Q.contacts[aa]; Q.contacts[ac.id].selected = false } var ab = D.one("#invite-emails"); var ae = D.one("#invite-message"); var Z = D.one("#invite-message-label"); ab.set("value", ""); ae.set("value", ""); Z.setContent("Tell your friends what this sled is about"); if (Q.contacts.length > 0) { D.all("#invite-overlay .participants-pane").show() } else { D.all("#invite-overlay .participants-pane").hide() } var ad = D.all("#invite-overlay .participants-list"); ad.setContent(W); P.set("centered", true); P.set("y", 45) } function F() { var X = D.sled.templates.manageParticipants(Q.sled.participants); var Z = D.all("#manage-overlay .participants-list"); Z.setContent(X); var aa = D.one("#manage-overlay"); aa.all(".participant").removeClass("selected"); if (Q.sled && Q.sled.participants && Q.sled.participants instanceof Array) { var ab, Y; for (ab = 0, Y = Q.sled.participants.length; ab < Y; ab++) { var W = Q.sled.participants[ab]; W.selected = false } } if (Q.sled && Q.sled.participants && Q.sled.participants instanceof Array && Q.sled.participants.length > 0) { D.all("#manage-overlay .participants-pane").show() } else { D.all("#manage-overlay .participants-pane").hide() } manageOverlay.set("centered", true); manageOverlay.set("y", 45); manageOverlay.show() } function V(Y) { if (Q.sled && Q.sled.participants && Q.sled.participants instanceof Array) { var ab, X; for (ab = 0, X = Q.sled.participants.length; ab < X; ab++) { var W = Q.sled.participants[ab]; W.selected = Y.participants.indexOf(W.id) !== -1; Q.sled.participants[W.id] = W } } var aa = D.sled.templates.taskParticipants(Q.sled.participants); var Z = D.one("#task-participant-list"); Z.setContent(aa); G.set("centered", true) } function B() { var X = D.one("#invite-overlay"); var Y = D.one("#invite-emails"); var aa = D.one("#invite-message"); var ad = D.one("#invite-invite"); var ab = D.one("#invite-cancel"); var W = D.one("#invite-close"); var ac = D.one(".launch-invite"); X.removeClass("sled-loading"); function Z() { R(); P.show() } P = new D.Overlay({ srcNode: X, visible: false, plugins: [D.Plugin.OverlayModal, D.Plugin.OverlayKeepaligned, { fn: D.Plugin.OverlayAutohide, cfg: { focusedOutside: false}}] }); P.render(); P.hide(); X.delegate("click", function (af) { var ae = af.currentTarget; var ag = ae.getAttribute("participant"); if (ae.hasClass("selected")) { ae.removeClass("selected") } else { ae.addClass("selected") } Q.contacts[ag].selected = ae.hasClass("selected") }, ".participant"); ad.on("click", function (aj) { var an = encodeURIComponent(aa.get("value")); var ae = postmile.api.uri + "/sled/" + Q.sled.id + "/participants?message=" + an; var al = Y.get("value").replace(/^\s+|\s+$/g, ""); al = al.split(","); al = al.map(function (ao) { return ao.replace(/^\s+|\s+$/g, "") }); al = al.filter(function (ao) { return ao.indexOf("@") >= 0 }); var ai = al; var ak, ah; for (ak = 0, ah = Q.contacts.length; ak < ah; ak++) { if (Q.contacts[ak].selected) { ai.push(Q.contacts[ak].id) } } var ag = { participants: ai }; var am = JSON.stringify(ag); if (ai.length > 0) { var af = function (aq, at) { if (aq.status === "ok") { Q.sled.participants = aq.participants; D.fire("sled:renderSledParticipants", Q.sled); X.all(".participant").removeClass("selected"); var ar, ap; for (ar = 0, ap = Q.contacts.length; ar < ap; ++ar) { var ao = Q.contacts[ar]; Q.contacts[ao.id].selected = false } Y.set("value", ""); aa.set("value", ""); D.fire("sled:inform", "Invitation sent", "You have invited " + ai.length + " participants.") } else { D.fire("sled:inform", "Invitation failed", "Failed to invite new participants.") } }; c(ae, am, af) } P.hide() }); ab.on("click", function (ae) { P.hide() }); W.on("click", function (ae) { P.hide() }); ac.on("click", function (af) { var ae = D.one("#sled-participants-menu"); ae.addClass("menu-hidden"); Z() }) } function C() { var X = D.one("#task-participants"); X.removeClass("sled-loading"); G = new D.Overlay({ srcNode: X, visible: false, plugins: [D.Plugin.OverlayModal, D.Plugin.OverlayKeepaligned, { fn: D.Plugin.OverlayAutohide, cfg: { focusedOutside: false}}] }); G.render(); X.delegate("click", function (af) { var Z = Q.task; var ac = af.currentTarget; var Y = ac.getAttribute("participant"); var ai = ac.get("checked"); Q.sled.participants[Y].selected = ai; var ae = false; var ad = []; if (Q.sled && Q.sled.participants && Q.sled.participants instanceof Array) { var ag, ab; for (ag = 0, ab = Q.sled.participants.length; ag < ab; ag++) { if (Q.sled.participants[ag].selected) { ad.push(Q.sled.participants[ag].id) } if (Q.sled.participants[ag].id === D.sled.gsled.profile.id) { ae = Q.sled.participants[ag].selected } } } var aa = { participants: ad }; var aj = JSON.stringify(aa); function ah(ak, an) { if (ak.status === "ok") { Z.participants = ad; Z.participantsCount = Z.participants.length; Z.isMe = ae; var ao = D.one("#tasks"); var al = ao.one('.task[task="' + Z.id + '"]'); var am = D.sled.templates.taskListHtml(Z, al); al.replace(am); al = ao.one('.task[task="' + Z.id + '"]'); D.sled.tasklist.showUpdatedAgo(al, true) } else { ac.set("checked", !ai) } } c("task/" + Z.id, aj, ah); if (ad.length > 1) { X.addClass("multiple") } else { X.removeClass("multiple") } }, "input"); X.ancestor().on("blur", function (Y) { L(true) }); X.on("mouseleave", function (Y) { L() }); X.on("mouseenter", function (Y) { E() }); var W = X.one("icon-tab"); X.on("mouseleave", function (Y) { L() }); X.on("mouseenter", function (Y) { E() }) } function N() { var Y = D.one("#manage-overlay"); var ad = D.one("#manage-overlay #manage-remove"); var W = D.one("#manage-overlay #manage-close"); var ac = D.one("#manage-overlay #manage-cancel"); Y.removeClass("sled-loading"); manageOverlay = new D.Overlay({ srcNode: Y, visible: false, plugins: [D.Plugin.OverlayModal, D.Plugin.OverlayKeepaligned, { fn: D.Plugin.OverlayAutohide, cfg: { focusedOutside: false}}] }); manageOverlay.render(); manageOverlay.hide(); Y.delegate("click", function (ag) { var af = ag.currentTarget; var ah = af.getAttribute("pid"); if (af.hasClass("selected")) { af.removeClass("selected") } else { af.addClass("selected") } if (ah) { var ae = Q.sled.participants[ah]; if (ae) { Q.sled.participants[ah].selected = af.hasClass("selected") } } }, ".participant"); ad.on("click", function (ai) { var ah = []; if (Q.sled && Q.sled.participants && Q.sled.participants instanceof Array) { var aj, ag; for (aj = 0, ag = Q.sled.participants.length; aj < ag; aj++) { var ak = Q.sled.participants[aj]; if (ak.selected) { ah.push(ak.id) } } } var af = { participants: ah }; var al = JSON.stringify(af); if (ah.length > 0) { var am = function (an, ao) { if (an.status === "ok") { Q.sled.participants = an.participants; D.fire("sled:renderSledParticipants", Q.sled) } else { D.fire("sled:inform", "Error", "Failed to remove participants.") } }; var ae = function (an) { var ao = postmile.api.uri + "/sled/" + Q.sled.id + "/participants"; s(ao, al, am) }; askHeader = ah.length > 1 ? "Remove Participants?" : "Remove Participant?"; D.fire("sled:confirm", askHeader, "If you remove a participant with items assigned, a dummy will be created to assume them.", ae) } manageOverlay.hide() }); var aa = D.one("#invite-message"); var ab = D.one("#invite-message-label"); function Z(ae) { var af = aa.get("value"); ab.setContent(" " + (250 - af.length) + " characters left (no links, please)..."); if (af.length > 250 - 1) { aa.set("value", af.substring(0, 250 - 1)) } if (af.indexOf("http://") >= 0) { aa.set("value", af.replace("http://", "(please, no links)")) } } aa.on("keyup", Z); ac.on("click", function (ae) { manageOverlay.hide() }); W.on("click", function (ae) { manageOverlay.hide() }); var X = D.one(".launch-manage"); X.on("click", function (af) { var ae = D.one("#sled-participants-menu"); ae.addClass("menu-hidden"); F() }) } function O(X, W, Z) { Q.task = W; if (W.participants) { I(X, W, Z) } else { var Y = { trigger: X, task: W, maxY: Z }; n("task/" + W.id, H, Y) } } function H(X, aa) { if (!X || (X._networkRequestStatusCode && X._networkRequestStatusCode !== 200)) { var Y = aa.trigger; var W = aa.task; var Z = aa.maxY; D.assert(Q.task === W); W.participants = X.participants || []; I(Y, W, Z) } else { } } function I(Y, X, W) { var aa = X.id; V(X); var ae = [D.WidgetPositionAlign.TR, D.WidgetPositionAlign.BR]; G.set("align", { node: Y, points: ae }); var ad = D.one("#task-participants"); var ac = ad.getY(); var Z = parseInt(ad.getComputedStyle("height"), 10); var ab = ac + Z; if (ab > W) { ae = [D.WidgetPositionAlign.BR, D.WidgetPositionAlign.TR]; ad.addClass("above"); G.set("align", { node: Y, points: ae }) } else { ad.removeClass("above") } G.set("align", { node: Y, points: ae }); if (X.participantsCount > 1) { ad.addClass("multiple") } else { ad.removeClass("multiple") } G.taskId = aa; G.show() } var K; function J() { G.hide(); var X = D.one("#tasks"); var W = X.all("li"); var Y = X.one('li.task[task="' + G.taskId + '"]'); W.removeClass("participantsMenu"); if (!Y.hasClass("open")) { Y.removeClass("active") } } function E() { if (K) { clearTimeout(K); K = null } } function L(W) { E(); if (W) { J() } else { K = setTimeout(J, 300) } } function S(Y, X, Z) { var W = G.get("visible"); if (W) { L(true) } else { O(Y, X, Z) } return !W } function T(X) { var W = G.get("visible"); return W && X === G.taskId } function U() { B(); N(); C(); D.on("sled:renderContacts", function (W) { M(W) }) } U(); D.namespace("sled").contacts = { toggleTaskParticipants: S, hideTaskParticipants: L, isTaskParticipantsOpen: T, last: null} }, "1.0.0", { requires: ["node", "overlay", "widget-anim", "gallery-overlay-extras"] }); YUI.add("sleddnd", function (E) { var G = false; var N; var L; var J; var F = false, C = 0; var O = new E.DD.Delegate({ cont: "#tasks", nodes: "#tasks li.task", target: { padding: "-10 10 10 -10" }, last: null }); O.dd.addInvalid(".tasktitle"); O.dd.addInvalid(".taskdetails"); O.dd.plug(E.Plugin.DDProxy, { moveOnEnd: false, last: null }); var D = E.one("#tasks"); if (D) { O.dd.plug(E.Plugin.DDConstrained, { node: D, last: null }) } var M = E.one("#tasks"); if (M) { O.dd.plug(E.Plugin.DDNodeScroll, { node: M, last: null }) } var P = new E.DD.Delegate({ cont: "#suggestions", nodes: "#suggestions li", last: null }); P.dd.removeInvalid("a"); P.dd.plug(E.Plugin.DDProxy, { moveOnEnd: false, last: null }); var H = E.one("#suggestions"); if (H) { P.dd.plug(E.Plugin.DDNodeScroll, { node: H, last: null }) } var B = new E.DD.Drop({ node: E.one("#tasks") }); O.on("drag:start", function (U) { N = document.body.style.cursor; document.body.style.cursor = "move"; var T = U.target; T.get("node").setStyle("opacity", ".25"); var S = T.get("node").getAttribute("task"); var Q = E.sled.gsled.sled.tasks[S]; var R = E.sled.templates.taskListHtml(Q); T.get("dragNode").set("innerHTML", R); T.get("dragNode").setStyles({ opacity: ".5", borderColor: T.get("node").getStyle("borderColor"), backgroundColor: T.get("node").getStyle("backgroundColor"), last: null }) }); P.on("drag:start", function (U) { var T = U.target; T.get("node").setStyle("opacity", ".25"); var Q = E.sled.gsled.sled.suggestions; var S = T.get("node").getAttribute("suggestion"); var V = Q[S]; var R = E.sled.templates.suggestionListHtml(V); T.get("dragNode").set("innerHTML", R); T.get("dragNode").setStyles({ opacity: ".5", borderColor: T.get("node").getStyle("borderColor"), backgroundColor: T.get("node").getStyle("backgroundColor"), last: null }) }); function K(Q) { var R = Q.target.lastXY[1]; if (R < C) { F = true } else { F = false } C = R; E.DD.DDM.syncActiveShims(true) } O.on("drag:drag", function (Q) { K(Q) }); P.on("drag:drag", function (Q) { K(Q) }); B.on("drop:enter", function (Q) { G = true }); B.on("drop:exit", function (S) { G = false; var R = E.one("#tasks"); var Q = R.all(".proxy"); Q.remove() }); O.on("drop:over", function (X) { if (L) { return } var W = X.drag.get("node"), V = X.drag.get("dragNode"), R = X.drop.get("node"); if (R.get("tagName").toLowerCase() === "li") { if (!F) { R = R.get("nextSibling") } if (W.hasClass("task")) { X.drop.get("node").get("parentNode").insertBefore(W, R) } else { var Y = E.one("#tasks"); var Z = Y.one(".proxy"); if (!Z) { var T = W.one("a"); var Q = { title: T.get("text"), participantsCount: 0 }; var S = "proxy addnewitem"; var aa = 'suggestion="' + W.getAttribute("suggestion") + '"'; var ab = ""; var U = E.sled.templates.taskListHtml(Q, null, S, aa, ab); X.drop.get("node").get("parentNode").insertBefore(U, R); Z = Y.one(".proxy"); E.sled.tasklist.showUpdatedAgo(Z, true) } else { Y.insertBefore(Z, R) } } if (X.drag.nodescroll) { X.drag.nodescroll.set("parentScroll", X.drop.get("node").get("parentNode")) } X.drop.sizeShim() } }); O.on("drag:end", function (R) { var Q = R.target; Q.get("node").setStyles({ visibility: "", opacity: "1" }); E.fire("sled:taskReorder", Q.get("node")); document.body.style.cursor = N }); P.on("drag:end", function (T) { var R = T.target; var S = E.one("#tasks"); var Q = S.one(".proxy"); if (!G) { R.get("node").setStyles({ visibility: "", opacity: "1" }); if (Q) { S.removeChild(Q) } } else { R.get("node").remove(); if (Q) { Q.removeClass("proxy"); Q.removeClass("addnewitem"); Q.addClass("task"); E.fire("sled:dropSuggestion", Q) } } }); function I() { if (E.sled.settings && !E.sled.settings.sledsReorder()) { return null } if (J) { J.syncTargets(); return J } J = new E.DD.Delegate({ cont: "#sleds", nodes: "#sleds li.sled", target: { padding: "-10 10 10 -10" }, last: null }); J.dd.removeInvalid("a"); J.dd.plug(E.Plugin.DDProxy, { moveOnEnd: false, last: null }); var Q = E.one("#sleds"); if (Q) { J.dd.plug(E.Plugin.DDConstrained, { constrain2node: Q, last: null }) } J.on("drag:start", function (U) { L = sledsmenu.menuNav.get("mouseOutHideDelay"); sledsmenu.menuNav.set("mouseOutHideDelay", 999999); N = document.body.style.cursor; document.body.style.cursor = "move"; var S = U.target; S.get("node").setStyle("opacity", ".25"); var V = S.get("node").getAttribute("sled"); var T = E.sled.gsled.sleds[V]; var R = E.sled.templates.sledMenuItem(T, E.sled.gsled.sled); S.get("dragNode").set("innerHTML", R); S.get("dragNode").setStyles({ opacity: ".5", borderColor: S.get("node").getStyle("borderColor"), backgroundColor: S.get("node").getStyle("backgroundColor"), last: null }) }); J.on("drag:drag", function (R) { K(R) }); J.on("drop:over", function (X) { var W = X.drag.get("node"), V = X.drag.get("dragNode"), R = X.drop.get("node"); if (R.get("tagName").toLowerCase() === "li") { if (!F) { R = R.get("nextSibling") } if (W.hasClass("sled")) { X.drop.get("node").get("parentNode").insertBefore(W, R) } else { var Y = E.one("#sleds"); var Z = Y.one(".proxy"); if (!Z) { var T = W.one("a"); var ac = { title: T.get("text"), participantsCount: 0 }; var S = "proxy addnewitem"; var aa = 'suggestion="' + W.getAttribute("suggestion") + '"'; var ab = ""; var U = E.sled.templates.sledMenuItem(ac, null); X.drop.get("node").get("parentNode").insertBefore(U, R) } else { Y.insertBefore(Z, R) } } if (X.drag.nodescroll) { X.drag.nodescroll.set("parentScroll", X.drop.get("node").get("parentNode")) } X.drop.sizeShim() } }); J.on("drag:end", function (S) { sledsmenu.menuNav.set("mouseOutHideDelay", L); L = null; var R = S.target; R.get("node").setStyles({ visibility: "", opacity: "1" }); E.fire("sled:sledReorder", R.get("node")); document.body.style.cursor = N }); return J } E.namespace("sled.dnd"); E.sled.dnd = { tasksDndDelegate: O, suggestionsDndDelegate: P, sledsDnd: I, last: null} }, "1.0.0", { requires: ["sledglobal", "dd-constrain", "dd-proxy", "dd-drop", "dd-scroll", "dd-delegate", "node"] }); YUI.add("sledsettings", function (C) { var B = C.sled.gsled; function L(Q) { B.settings = []; var O = ""; var N, M; for (N = 0, M = Q.length; N < M; ++N) { var P = Q[N]; if (P.id !== "oneDetailAtaTime") { B.settings.push(P); B.settings[P.id] = P; O += C.sled.templates.settingsMenuItem(P) } } O += ""; var R = C.one("#settings"); R.setContent(O) } function K() { var M = C.one("#account-menu"); M.delegate("click", function (Q) { var P = Q.currentTarget.getAttribute("setting"); C.assert(P); var O = B.settings[P]; C.assert(O); O.value = !O.value; selectedSledMenuLink = M.one('li[setting="' + O.id + '"]'); selectedSledMenuAnchor = selectedSledMenuLink.one("a"); if (O.value) { selectedSledMenuAnchor.addClass("enabled") } else { selectedSledMenuAnchor.removeClass("enabled") } var N = { value: JSON.stringify(B.settings) }; c("storage/settings", JSON.stringify(N), G) }, ".setting") } function G(M) { if (M.status !== "ok") { } } function H(N) { if (!N || (N._networkRequestStatusCode && N._networkRequestStatusCode !== 200) || !N.settings) { var M = { value: JSON.stringify(B.settings) }; c("storage/settings", JSON.stringify(M), G) } else { B.settings = JSON.parse(N.settings); L(B.settings) } } function F() { if (!B.settings) { B.settings = [{ id: "multipleDetails", title: "Multi-Details", value: false}]; L(B.settings); n("storage/settings", H) } return B.settings } function J() { if (!F().multipleDetails) { B.settings.push({ id: "multipleDetails", title: "Multi-open Details", value: false }); L(B.settings) } return (F() && F().multipleDetails) ? F().multipleDetails.value : false } function I() { if (!F().multilineDetails) { B.settings.push({ id: "multilineDetails", title: "Multi-line Details", value: false }); L(B.settings) } return (F() && F().multilineDetails) ? F().multilineDetails.value : false } function D() { if (!F().confirmDelete) { B.settings.push({ id: "confirmDelete", title: "Confirm Delete", value: true }); L(B.settings) } return (F() && F().confirmDelete) ? F().confirmDelete.value : true } function E() { if (!F().sledsReorder) { B.settings.push({ id: "sledsReorder", title: "Sled Reorder", value: true }); L(B.settings) } return (F() && F().sledsReorder) ? F().sledsReorder.value : true } C.namespace("sled.settings"); C.sled.settings = { multipleDetails: J, confirmDelete: D, sledsReorder: E, multilineDetails: I, last: null }; K(); if (C.sled.settings) { C.sled.settings.multipleDetails() } }, "1.0.0", { requires: ["sledglobal", "slednetwork"] }); YUI.add("sledsuggestionlist", function (C) { var B = C.sled.gsled; var G = C.one("#suggestions"); function F(P, O) { if (!P || (P._networkRequestStatusCode && P._networkRequestStatusCode !== 200)) { } var S = B.sleds[O]; S.suggestions = P; var N = ""; if (P) { var M, K; for (M = 0, K = P.length; M < K; ++M) { var L = P[M]; L.index = M; P[L.id] = L; N += C.sled.templates.suggestionListHtml(L) } } N += ""; var Q = C.one("#suggestions"); if (Q) { Q.setContent(N) } var R = C.one("#suggestionpane"); R.removeClass("sled-loading"); hideSuggestionsLoading(); C.fire("sled:checkUncover") } function D(K) { document.activeElement.blur() } function I(N) { var M = B.sled; var O = N.currentTarget.ancestor("li", true); var L = O.getAttribute("suggestion"); var K = M.suggestions[L]; M.suggestions.splice(K.index, 1); delete M.suggestions[K.id]; F(M.suggestions, M.id) } function E(O) { var M = B.sled; var P = O.currentTarget.ancestor("li", true); var L = P.getAttribute("suggestion"); var K = M.suggestions[L]; function N(Q, R) { } s("sled/" + M.id + "/suggestion/" + K.id, null, N); I(O) } function J(N) { var M = B.sled; var O = N.currentTarget.ancestor("li", true); var L = O.getAttribute("suggestion"); var K = M.suggestions[L]; C.fire("sled:addSuggestion", K); I(N) } function H() { if (G) { G.delegate("click", D, "li"); G.delegate("click", E, ".removeSuggestion"); G.delegate("click", J, ".clickableArrow") } C.on("sled:renderSuggestions", function (K, L) { F(K, L) }) } H(); C.namespace("sled").suggestionlist = {} }, "1.0.0", { requires: ["sledglobal", "tasklist", "node"] }); YUI.add("sledtooltips", function (I) { var G = I.Lang, D = I.Node, C = -10000, B = -10000; var H; var F = I.Base.create("tooltip", I.Widget, [I.WidgetPosition, I.WidgetStack], { initializer: function (J) { this._triggerClassName = this.getClassName("trigger"); this._currTrigger = { node: null, title: null, mouseX: F.OFFSCREEN_X, mouseY: F.OFFSCREEN_Y }; this._eventHandles = { delegate: null, trigger: { mouseMove: null, mouseOut: null} }; this._timers = { show: null, hide: null }; this.publish("triggerEnter", { defaultFn: this._defTriggerEnterFn, preventable: true }); this.publish("triggerLeave", { preventable: false }) }, destructor: function () { this._clearCurrentTrigger(); this._clearTimers(); this._clearHandles() }, bindUI: function () { this.after("delegateChange", this._afterSetDelegate); this.after("nodesChange", this._afterSetNodes); this._bindDelegate() }, syncUI: function () { this._uiSetNodes(this.get("triggerNodes")) }, setTriggerContent: function (N, L) { var K = this.get("contentBox"); K.set("innerHTML", ""); if (N) { if (N instanceof D) { var M, J; for (M = 0, J = N.size(); M < J; ++M) { K.appendChild(N.item(M)) } } else { if (G.isString(N)) { K.set("innerHTML", N) } } } }, _afterSetNodes: function (J) { this._uiSetNodes(J.newVal) }, _afterSetDelegate: function (J) { this._bindDelegate(J.newVal) }, _uiSetNodes: function (J) { if (this._triggerNodes) { this._triggerNodes.removeClass(this._triggerClassName) } if (J) { this._triggerNodes = J; this._triggerNodes.addClass(this._triggerClassName) } }, _bindDelegate: function () { var J = this._eventHandles; if (J.delegate) { J.delegate.detach(); J.delegate = null } J.delegate = I.delegate("mouseenter", I.bind(this._onNodeMouseEnter, this), this.get("delegate"), "." + this._triggerClassName) }, _onNodeMouseEnter: function (K) { H = false; var J = K.currentTarget; if (J && (!this._currTrigger.node || !J.compareTo(this._currTrigger.node))) { this._enterTrigger(J, K.pageX, K.pageY) } }, _onNodeMouseLeave: function (J) { H = false; this._leaveTrigger(J.currentTarget) }, _onNodeMouseMove: function (J) { H = true; this._overTrigger(J.pageX, J.pageY) }, _enterTrigger: function (K, J, L) { this._setCurrentTrigger(K, J, L); this.fire("triggerEnter", { node: K, pageX: J, pageY: L }) }, _defTriggerEnterFn: function (L) { var K = L.node; if (!this.get("disabled")) { this._clearTimers(); var J = (this.get("visible")) ? 0 : this.get("showDelay"); this._timers.show = I.later(J, this, this._showTooltip, [K]) } }, _leaveTrigger: function (J) { if (!H) { } this.fire("triggerLeave"); this._clearCurrentTrigger(); this._clearTimers(); this._timers.hide = I.later(this.get("hideDelay"), this, this._hideTooltip) }, _overTrigger: function (J, K) { this._currTrigger.mouseX = J; this._currTrigger.mouseY = K }, _showTooltip: function (N) { var M = N.ancestor("li").hasClass("open"); if (M) { return } var L = N; var Q = N.ancestor("li"); nw = parseInt(L.getStyle("width"), 10); anw = parseInt(Q.getStyle("width"), 10); var O = window.getSelection().toString(); var K = Q.hasClass("editing"); if (L._node.scrollWidth > L._node.clientWidth && !O && !K) { this.setTriggerContent(L.get("text"), L.getStyle("font-weight")) } else { this.setTriggerContent(""); return } var J = N.getX(); var P = N.getY(); this.move(J + F.OFFSET_X, P + F.OFFSET_Y); this.show(); this._clearTimers(); this._timers.hide = I.later(this.get("autoHideDelay"), this, this._hideTooltip) }, _hideTooltip: function () { this._clearTimers(); this.hide() }, _setTriggerContent: function (K) { var J = this.get("content"); if (J && !(J instanceof D || G.isString(J))) { J = J[K.get("id")] || K.getAttribute("title") } this.setTriggerContent(J) }, _setCurrentTrigger: function (K, J, O) { var L = this._currTrigger, N = this._eventHandles.trigger; this._setTriggerContent(K); N.mouseMove = I.on("mousemove", I.bind(this._onNodeMouseMove, this), K); N.mouseOut = I.on("mouseleave", I.bind(this._onNodeMouseLeave, this), K); var M = K.getAttribute("title"); K.setAttribute("title", ""); L.mouseX = J; L.mouseY = O; L.node = K; L.title = M }, _clearCurrentTrigger: function () { var K = this._currTrigger, M = this._eventHandles.trigger; if (K.node) { var J = K.node; var L = K.title || ""; K.node = null; K.title = ""; M.mouseMove.detach(); M.mouseOut.detach(); M.mouseMove = null; M.mouseOut = null; J.setAttribute("title", L) } }, _clearTimers: function () { var J = this._timers; if (J.hide) { J.hide.cancel(); J.hide = null } if (J.show) { J.show.cancel(); J.show = null } }, _clearHandles: function () { var J = this._eventHandles; if (J.delegate) { this._eventHandles.delegate.detach() } if (J.trigger.mouseOut) { J.trigger.mouseOut.detach() } if (J.trigger.mouseMove) { J.trigger.mouseMove.detach() } } }, { OFFSET_X: 0, OFFSET_Y: 0, OFFSCREEN_X: C, OFFSCREEN_Y: B, ATTRS: { content: { value: null }, triggerNodes: { value: null, setter: function (J) { if (J && G.isString(J)) { J = D.all(J) } return J } }, delegate: { value: null, setter: function (J) { return I.one(J) || I.one("document") } }, showDelay: { value: 1250 }, hideDelay: { value: 10 }, autoHideDelay: { value: 20000 }, visible: { value: false }, xy: { value: [C, B]}} }); var E = new F({ triggerNodes: ".yui3-hastooltip", delegate: "#tasks", content: { tt3: "Tooltip 3 (from lookup)" }, shim: false, zIndex: 2 }); E.render(); E.on("triggerEnter", function (J) { }); I.namespace("sled").tooltips = { Tooltip: F, tasktip: E, last: null} }, "1.0.0", { requires: ["event-mouseenter", "widget", "widget-position", "widget-stack"] }); YUI.add("gallery-overlay-extras", function (F) { var Q = "overlay", ab = "host", X = "renderUI", K = "bindUI", T = "syncUI", C = "rendered", ad = "boundingBox", Z = "visible", I = "zIndex", U = "Change", R = F.Lang.isBoolean, ac = F.ClassNameManager.getClassName, G = (function () { var ae = null, af, Y; if (document.createElement) { af = document.createElement("div"); if (af && af.style) { af.style.position = "fixed"; af.style.top = "10px"; Y = document.body; if (Y && Y.appendChild && Y.removeChild) { Y.appendChild(af); ae = (af.offsetTop === 10); Y.removeChild(af) } } } return ae } ()), B, M = "overlayModal", P = "modal", E = "mask", N = { modal: ac(Q, P), mask: ac(Q, E) }, S, J = "overlayKeepaligned", aa = "keepalgined", V, W = "overlayAutohide", H = "autohide", L = "clickedOutside", O = "focusedOutside", D = "pressedEscape"; B = F.Base.create(M, F.Plugin.Base, [], { _maskNode: null, _uiHandles: null, initializer: function (Y) { this.afterHostMethod(X, this.renderUI); this.afterHostMethod(K, this.bindUI); this.afterHostMethod(T, this.syncUI); if (this.get(ab).get(C)) { this.renderUI(); this.bindUI(); this.syncUI() } }, destructor: function () { if (this._maskNode) { this._maskNode.remove(true) } this._detachUIHandles(); this.get(ab).get(ad).removeClass(N.modal) }, renderUI: function () { var ae = this.get(ab).get(ad), Y = ae.get("parentNode") || F.one("body"); this._maskNode = F.Node.create("<div></div>"); this._maskNode.addClass(N.mask); this._maskNode.setStyles({ position: G ? "fixed" : "absolute", width: "100%", height: "100%", top: "0", left: "0", display: "none" }); Y.insert(this._maskNode, Y.get("firstChild")); ae.addClass(N.modal) }, bindUI: function () { this.afterHostEvent(Z + U, this._afterHostVisibleChange); this.afterHostEvent(I + U, this._afterHostZIndexChange) }, syncUI: function () { var Y = this.get(ab); this._uiSetHostVisible(Y.get(Z)); this._uiSetHostZIndex(Y.get(I)) }, _focus: function () { var ae = this.get(ab), af = ae.get(ad), Y = af.get("tabIndex"); af.set("tabIndex", Y >= 0 ? Y : 0); ae.focus(); af.set("tabIndex", Y) }, _blur: function () { this.get(ab).blur() }, _getMaskNode: function () { return this._maskNode }, _uiSetHostVisible: function (Y) { if (Y) { F.later(1, this, "_attachUIHandles"); this._maskNode.setStyle("display", "block"); this._focus() } else { this._detachUIHandles(); this._maskNode.setStyle("display", "none"); this._blur() } }, _uiSetHostZIndex: function (Y) { this._maskNode.setStyle(I, Y || 0) }, _attachUIHandles: function (ae) { if (this._uiHandles) { return } var Y = this.get(ab), af = Y.get(ad); this._uiHandles = [af.on("clickoutside", F.bind(this._focus, this)), af.on("focusoutside", F.bind(this._focus, this))]; if (!G) { this._uiHandles.push(F.one("win").on("scroll", F.bind(function (ah) { var ag = this._maskNode; ag.setStyle("top", ag.get("docScrollY")) }, this))) } }, _detachUIHandles: function () { F.each(this._uiHandles, function (Y) { Y.detach() }); this._uiHandles = null }, _afterHostVisibleChange: function (Y) { this._uiSetHostVisible(Y.newVal) }, _afterHostZIndexChange: function (Y) { this._uiSetHostZIndex(Y.newVal) } }, { NS: P, ATTRS: { maskNode: { getter: "_getMaskNode", readOnly: true} }, CLASSES: N }); S = F.Base.create(J, F.Plugin.Base, [], { _uiHandles: null, initializer: function (Y) { this.afterHostMethod(K, this.bindUI); this.afterHostMethod(T, this.syncUI); if (this.get(ab).get(C)) { this.bindUI(); this.syncUI() } }, destructor: function () { this._detachUIHandles() }, bindUI: function () { this.afterHostEvent(Z + U, this._afterHostVisibleChange) }, syncUI: function () { this._uiSetHostVisible(this.get(ab).get(Z)) }, _uiSetHostVisible: function (Y) { if (Y) { this._attachUIHandles() } else { this._detachUIHandles() } }, _attachUIHandles: function () { if (this._uiHandles) { return } var Y = this.get(ab), ae = F.bind(Y._syncUIPosAlign || Y._syncUIPosAlgin, Y); this._uiHandles = [F.on("windowresize", ae), F.on("scroll", ae)] }, _detachUIHandles: function () { F.each(this._uiHandles, function (Y) { Y.detach() }); this._uiHandles = null }, _afterHostVisibleChange: function (Y) { this._uiSetHostVisible(Y.newVal) } }, { NS: aa }); V = F.Base.create(W, F.Plugin.Base, [], { _uiHandles: null, initializer: function (Y) { this.afterHostMethod(K, this.bindUI); this.afterHostMethod(T, this.syncUI); if (this.get(ab).get(C)) { this.bindUI(); this.syncUI() } }, destructor: function () { this._detachUIHandles() }, bindUI: function () { this.afterHostEvent(Z + U, this._afterHostVisibleChange) }, syncUI: function () { this._uiSetHostVisible(this.get(ab).get(Z)) }, _uiSetHostVisible: function (Y) { if (Y) { F.later(1, this, "_attachUIHandles") } else { this._detachUIHandles() } }, _attachUIHandles: function () { if (this._uiHandles) { return } var af = this.get(ab), ag = af.get(ad), ae = F.bind(af.hide, af), Y = []; if (this.get(L)) { Y.push(ag.on("clickoutside", ae)) } if (this.get(O)) { Y.push(ag.on("focusoutside", ae)) } if (this.get(D)) { Y.push(ag.on("keydown", function (ah) { if (ah.keyCode === 27) { ae() } })) } this._uiHandles = Y }, _detachUIHandles: function () { F.each(this._uiHandles, function (Y) { Y.detach() }); this._uiHandles = null }, _afterHostVisibleChange: function (Y) { this._uiSetHostVisible(Y.newVal) } }, { NS: H, ATTRS: { clickedOutside: { value: true, validator: R }, focusedOutside: { value: true, validator: R }, pressedEscape: { value: true, validator: R}} }); F.Plugin.OverlayModal = B; F.Plugin.OverlayKeepaligned = S; F.Plugin.OverlayAutohide = V }, "gallery-2010.08.04-19-46", { requires: ["overlay", "plugin", "event-resize"], supersedes: ["gallery-overlay-modal"] }); var w = function (B) { return (B ? B.get("nodeName").toLowerCase() === "a" : false) }; var z = function (B) { return B.hasClass("menuitem") }; var j = function (B) { return B.hasClass("menu-label") }; var u = function (B) { return B.hasClass("menu-label-menuvisible") }; var v = function (B) { return w(B) ? B : B.one("a") }; var y = function (D, C, B) { var E; if (D) { if (D.hasClass(C)) { E = D } if (!E && B) { E = D.ancestor(("." + C)) } } return E }; var a = function (B) { return B.ancestor(".menu") }; var t = function (C, B) { return y(C, "menu", B) }; var k = function (C, B) { var D; if (C) { D = y(C, "menuitem", B) } return D }; var A = function (C, B) { var D; if (C) { if (B) { D = y(C, "menu-label", B) } else { D = y(C, "menu-label") || C.one((".menu-label")) } } return D }; var o = function (C, B) { var D; if (C) { D = k(C, B) || A(C, B) } return D }; var i = function (B) { return o(B.one("li")) }; var g = function (B) { return z(B) ? "menuitem-active" : "menu-label-active" }; var p = function (B, C) { return B && !B.handledMouseOver && (B.compareTo(C) || B.contains(C)) }; var m = function (C, B) { return C && !C.handledMouseOut && (!C.compareTo(B) && !C.contains(B)) }; var b = function () { b.superclass.constructor.apply(this, arguments) }; b.NAME = "nodeMenuNav"; b.NS = "menuNav"; b.ATTRS = { mouseOutHideDelay: { value: 250} }; h.extend(b, h.Plugin.Base, { _rootMenu: null, _activeItem: null, _activeMenu: null, _hasFocus: false, _currentMouseX: 0, _movingToSubmenu: false, _hideAllSubmenusTimer: null, _firstItem: null, initializer: function (D) { var E = this, F = this.get("host"), C = [], B; if (F) { E._rootMenu = F; F.all(".menu").addClass("menu-hidden"); C.push(F.on("mouseover", E._onMouseOver, E)); C.push(F.on("mouseout", E._onMouseOut, E)); C.push(F.on("mousemove", E._onMouseMove, E)); C.push(F.on("mousedown", E._toggleSubmenuDisplay, E)); C.push(F.on("click", E._toggleSubmenuDisplay, E)); B = F.get("ownerDocument"); C.push(B.on("mousedown", E._onDocMouseDown, E)); C.push(B.on("focus", E._onDocFocus, E)); this._eventHandlers = C; E._initFocusManager() } }, destructor: function () { var B = this._eventHandlers; if (B) { h.Array.each(B, function (C) { C.detach() }); this._eventHandlers = null } this.get("host").unplug("focusManager") }, _isRoot: function (B) { return this._rootMenu.compareTo(B) }, _getTopmostSubmenu: function (E) { var D = this, B = a(E), C; if (!B) { C = E } else { if (D._isRoot(B)) { C = E } else { C = D._getTopmostSubmenu(B) } } return C }, _clearActiveItem: function () { var C = this, B = C._activeItem; if (B) { B.removeClass(g(B)) } C._activeItem = null }, _setActiveItem: function (C) { var B = this; if (C) { B._clearActiveItem(); C.addClass(g(C)); B._activeItem = C } }, _focusItem: function (D) { var C = this, B, E; if (D && C._hasFocus) { B = a(D); E = v(D); if (B && !B.compareTo(C._activeMenu)) { C._activeMenu = B; C._initFocusManager() } C._focusManager.focus(E) } }, _showMenu: function (D) { var B = a(D), C = D.get("parentNode"); D.previous().addClass("menu-label-menuvisible"); D.removeClass("menu-hidden") }, _hideMenu: function (E, C) { var D = this, F = E.previous(), B; F.removeClass("menu-label-menuvisible"); if (C) { D._focusItem(F); D._setActiveItem(F) } B = E.one((".menuitem-active")); if (B) { B.removeClass("menuitem-active") } E.addClass("menu-hidden") }, _hideAllSubmenus: function (C) { var B = this; C.all(".menu").each(h.bind(function (D) { B._hideMenu(D) }, B)) }, _initFocusManager: function () { var E = this, G = E._rootMenu, C = E._activeMenu || G, F = E._isRoot(C) ? "" : ("#" + C.get("id")), B = E._focusManager, D, H, I; H = F + ">.menu-content>ul>li>a"; D = { next: "down:40", previous: "down:38" }; if (!B) { G.plug(h.Plugin.NodeFocusManager, { descendants: H, keys: D, circular: true }); B = G.focusManager; I = "#" + G.get("id") + ".menu a,.menu-toggle"; G.all(I).set("tabIndex", -1); B.after("activeDescendantChange", this._afterActiveDescendantChange, B, this); E._focusManager = B } else { B.set("activeDescendant", -1); B.set("descendants", H); B.set("keys", D) } }, _afterActiveDescendantChange: function (C, B) { var D; if (C.src === "UI") { D = o(this.get("descendants").item(C.newVal), true); B._setActiveItem(D) } }, _onDocFocus: function (F) { var E = this, B = E._activeItem, D = F.target, C; if (E._rootMenu.contains(D)) { if (E._hasFocus) { C = a(D); if (!E._activeMenu.compareTo(C)) { E._activeMenu = C; E._initFocusManager(); E._focusManager.set("activeDescendant", D); E._setActiveItem(o(D, true)) } } else { E._hasFocus = true; B = o(D, true); if (B) { E._setActiveItem(B) } } } else { E._clearActiveItem(); E._hideAllSubmenus(E._rootMenu); E._activeMenu = E._rootMenu; E._initFocusManager(); E._focusManager.set("activeDescendant", 0); E._hasFocus = false } }, _onMenuMouseOver: function (E, D) { var C = this, B = C._hideAllSubmenusTimer; if (B) { B.cancel(); C._hideAllSubmenusTimer = null } if (E && !E.compareTo(C._activeMenu)) { C._activeMenu = E; if (C._hasFocus) { C._initFocusManager() } } }, _hideAndFocusLabel: function () { var D = this, C = D._activeMenu, B; D._hideAllSubmenus(D._rootMenu); if (C) { B = D._getTopmostSubmenu(C); D._focusItem(B.previous()) } }, _onMenuMouseOut: function (I, G) { var F = this, D = F._activeMenu, H = G.relatedTarget, B = F._activeItem, E, C; if (D && !D.contains(H)) { E = a(D); if (E && !E.contains(H)) { if (F.get("mouseOutHideDelay") > 0) { F._hideAllSubmenusTimer = h.later(F.get("mouseOutHideDelay"), F, F._hideAndFocusLabel) } } else { if (B) { C = a(B); if (!F._isRoot(C)) { F._focusItem(C.previous()) } } } } }, _onMenuLabelMouseOver: function (E, G) { var F = this, D = F._activeMenu, B = F._isRoot(D), C; F._focusItem(E); F._setActiveItem(E) }, _onMenuLabelMouseOut: function (C, E) { var D = this, B = D._isRoot(D._activeMenu); oRelatedTarget = E.relatedTarget, oSubmenu = C.next(), hoverTimer = D._hoverTimer; if (hoverTimer) { hoverTimer.cancel() } D._clearActiveItem() }, _onMenuItemMouseOver: function (D, F) { var E = this, C = E._activeMenu, B = E._isRoot(C); E._focusItem(D); E._setActiveItem(D) }, _onMenuItemMouseOut: function (B, C) { this._clearActiveItem() }, _onMouseMove: function (C) { var B = this; h.later(10, B, function () { B._currentMouseX = C.pageX }) }, _onMouseOver: function (F) { var E = this, C, B, H, D, G; C = F.target; B = t(C, true); H = A(C, true); G = k(C, true); if (p(B, C)) { E._onMenuMouseOver(B, F); B.handledMouseOver = true; B.handledMouseOut = false; D = a(B); if (D) { D.handledMouseOut = true; D.handledMouseOver = false } } if (p(H, C)) { E._onMenuLabelMouseOver(H, F); H.handledMouseOver = true; H.handledMouseOut = false } if (p(G, C)) { E._onMenuItemMouseOver(G, F); G.handledMouseOver = true; G.handledMouseOut = false } }, _onMouseOut: function (C) { var D = this, F = D._activeMenu, K = false, E, G, I, B, H, J; D._movingToSubmenu = (F && ((C.pageX - 5) > D._currentMouseX)); E = C.target; G = C.relatedTarget; I = t(E, true); B = A(E, true); J = k(E, true); if (m(B, G)) { D._onMenuLabelMouseOut(B, C); B.handledMouseOut = true; B.handledMouseOver = false } if (m(J, G)) { D._onMenuItemMouseOut(J, C); J.handledMouseOut = true; J.handledMouseOver = false } if (B) { H = B.next(); if (H && G && (G.compareTo(H) || H.contains(G))) { K = true } } if (m(I, G) || K) { D._onMenuMouseOut(I, C); I.handledMouseOut = true; I.handledMouseOver = false } }, _toggleSubmenuDisplay: function (D) { var E = this, F = D.target, C = A(F, true), B = D.type, J, I, H, K, L, G; if (C) { J = w(F) ? F : F.ancestor(w); if (J) { H = J.getAttribute("href", 2); K = H.indexOf("#"); L = H.length; if (K === 0 && L > 1) { G = H.substr(1, L); I = C.next(); if (I && (I.get("id") === G)) { if (B === "mousedown" || B === "keydown") { if (B == "mousedown") { D.preventDefault(); D.stopImmediatePropagation(); E._hasFocus = true } if (E._isRoot(a(F))) { if (u(C)) { E._hideMenu(I); E._focusItem(C); E._setActiveItem(C) } else { E._hideAllSubmenus(E._rootMenu); E._showMenu(I); E._focusItem(i(I)); E._setActiveItem(i(I)) } } else { if (E._activeItem == C) { E._showMenu(I); E._focusItem(i(I)); E._setActiveItem(i(I)) } else { if (!C._clickHandle) { C._clickHandle = C.on("click", function () { E._hideAllSubmenus(E._rootMenu); E._hasFocus = false; E._clearActiveItem(); C._clickHandle.detach(); C._clickHandle = null }) } } } } if (B === "click") { D.preventDefault() } } } } } }, _onDocMouseDown: function (E) { var D = this, C = D._rootMenu, B = E.target; if (!(C.compareTo(B) || C.contains(B))) { D._hideAllSubmenus(C) } } }); h.namespace("Plugin"); h.Plugin.NodeMenuNav = b; YUI.add("sledstream", function (C) { var M = {}; var Q; function H(S) { if (S && !S.subscribed && M.session) { var T = function (U, V) { if (U.status === "ok") { S.subscribed = true } else { } }; c("stream/" + M.session + "/sled/" + S.id, null, T) } } function K() { if (M.session) { var V = function (W, X) { if (W.status === "ok") { X.subscribed = false } else { } }; var T, S; for (T = 0, S = C.sled.gsled.sleds.length; T < S; ++T) { var U = C.sled.gsled.sleds[T]; if (U.subscribed) { s("stream/" + M.session + "/sled/" + U.id, null, V, U); U.subscribed = false } } } } function D(V) { if (V.type === "connect") { Q.send({ type: "initialize", id: e.id, mac: MAC.macMessage(V.session, e) }); M.session = V.session } else { if (V.type === "initialize") { if (V.status === "ok") { M.status = V.status; var T, S; for (T = 0, S = C.sled.gsled.sleds.length; T < S; ++T) { var U = C.sled.gsled.sleds[T]; U.subscribed = false } if (C.sled && C.sled.gsled && C.sled.gsled.sled) { H(C.sled.gsled.sled) } } } else { if (V.type === "subscribe") { } else { if (V.type === "disconnect") { if (C.sled && C.sled.gsled && C.sled.gsled.sled) { H(C.sled.gsled.sled) } } else { if (V.type === "update") { R(V) } else { } } } } } } function R(S) { if (e.id.indexOf(S.macId) === 0) { } else { switch (S.object) { case "sleds": case "sledlist": P(S); break; case "sled": G(S); break; case "tasks": F(S); break; case "task": I(S); break; case "details": J(S); break; case "profile": case "user": N(S); break; case "contacts": E(S); break; case "tips": O(S); break; case "suggestions": B(S); break } } } function P(T) { function S(V, U) { if (V && V._networkRequestStatusCode && V._networkRequestStatusCode === 200) { C.fire("sled:renderSleds", V); C.fire("sled:changedBy", "Sleds changed", T.by, ".sled-title-box") } else { } } n("sleds", S) } function G(T) { var U = T.sled; function S(W, V) { if (W && W._networkRequestStatusCode && W._networkRequestStatusCode === 200) { C.fire("sled:renderSled", W, V); C.fire("sled:renderSleds", C.sled.gsled.sleds); if (U === C.sled.gsled.sled.id) { C.fire("sled:changedBy", "Sled changed", T.by, "#main-box") } else { } } else { } } n("sled/" + T.sled, S) } function F(T) { function S(Y) { if (Y && Y._networkRequestStatusCode && Y._networkRequestStatusCode === 200) { var X = C.sled.gsled.sleds[T.sled]; if (X.id === C.sled.gsled.sled.id) { C.fire("sled:renderTasks", Y, T.sled); C.fire("sled:changedBy", "Tasks changed", T.by, "#bluebox") } else { X.tasks = Y; if (Y) { var W, U; for (W = 0, U = Y.length; W < U; ++W) { var V = Y[W]; V.index = W; Y[V.id] = V } } } } else { } } n("sled/" + T.sled + "/tasks", S) } function I(U) { var T = C.sled.gsled.sleds[U.sled]; var S = T.tasks[U.task]; C.assert(S.id === U.task); function V(Y, X) { if (Y && Y._networkRequestStatusCode && Y._networkRequestStatusCode === 200) { S.created = Y.modified; S.modified = Y.created; S.participants = Y.participants || []; C.assert(!S.sled || S.sled === Y.sled); S.status = Y.status; S.title = Y.title; C.assert(S.id === Y.id); S.participantsCount = S.participants.length; S.isParticipant = false; var ac, W; for (ac = 0, W = S.participants.length; ac < W; ac++) { if (S.participants[ac] === C.sled.gsled.profile.id) { S.isMe = true; break } } if (T.id === C.sled.gsled.sled.id) { var ab = C.one("#tasks"); var Z = ab.one('.task[task="' + S.id + '"]'); var aa = C.sled.templates.taskListHtml(S, Z); Z.replace(aa); Z = ab.one('.task[task="' + S.id + '"]'); C.sled.tasklist.showUpdatedAgo(Z, true); C.fire("sled:changedBy", "Task changed", U.by, Z) } } else { } } n("task/" + S.id, V) } function J(U) { var T = C.sled.gsled.sleds[U.sled]; var S = T.tasks[U.task]; function V(X, W) { if (X && X._networkRequestStatusCode && X._networkRequestStatusCode === 200) { S.details = X; if (S.details.thread.length > 0) { var ac = S.details.thread[S.details.thread.length - 1]; S.detailsModified = ac.created; S.detailsModifiedBy = ac.user } if (T.id === C.sled.gsled.sled.id) { var aa = C.one("#tasks"); var Y = aa.one('.task[task="' + S.id + '"]'); var Z = C.sled.templates.taskListHtml(S, Y); Y.replace(Z); Y = aa.one('.task[task="' + S.id + '"]'); C.sled.tasklist.showUpdatedAgo(Y, true); Z = C.sled.templates.taskDetailsHtml(S); var ab = Y.one(".messages"); ab.setContent(Z); C.fire("sled:changedBy", "Item details added", U.by, Y) } } else { } } n("task/" + S.id + "/details", V, S) } function N(S) { n("profile", function (T) { C.fire("sled:renderProfile", T) }) } function E(S) { n("contacts", function (T) { C.fire("sled:renderContacts", T) }) } function O(S) { if (C.sled && C.sled.user) { n("sled/" + S.id + "/tips", function (T, U) { C.fire("sled:renderTips", T, U) }, S.id) } } function B(S) { if (C.sled && C.sled.suggestionlist) { n("sled/" + S.id + "/suggestions", function (T, U) { C.fire("sled:renderSuggestions", T, U) }, S.id) } } function L() { Q = new io.Socket(postmile.api.domain, { port: postmile.api.port, rememberTransport: false }); Q.on("connect", function () { }); Q.on("message", function (S) { D(S) }); Q.connect(); C.on("sled:subscribeSled", function (S) { H(S) }) } C.namespace("sled").stream = {}; L() }, "1.0.0", { requires: ["node"] }); YUI.add("sledtour", function (E) { var G = 0; var C = false; var B = [{ title: "Welcome to Sled!", text: "Sled helps you make lists and collaborate with your friends and family. You can use Sled for planning an event, a project, a shopping list, or any other list you want. This quick tour will introduce you to Sled's main features. Let's get started!<div class=\"mini\">You can stop the tour at any point and launch it again from the Account menu</div>", style: { top: 32, left: 10, height: 0, width: 0} }, { title: "Current sled", text: "The title of the current sled (we call each list a 'sled'). You can edit the title by clicking on the text. We recommend using descriptive names that will help you and the other participants quickly recognize what this sled is about.", style: { top: 32, left: 10, height: 46, width: 410} }, { title: "Sleds menu", text: "The sleds menu allows you to switch between your sleds, create a new sled, or delete the current sled.", style: { top: 32, left: 420, height: 46, width: 50} }, { title: "Sled details", text: "If your sled is an event or if it has a location, you can use the date, time, and place options to keep that information. Use these fields as you wish. They are just for keeping track and sharing information with the other participants. These detail are about the entire sled, not any individual item.", style: { top: 77, left: 10, height: 22, width: 560} }, { title: "Sleds participants", text: "Sled is more fun with friends. The participants menu allows you to see who is part of this sled, invite new participants, or remove participants (if you are the sled owner). When you invite new participants, the menu will show you who accepted your invitation.", style: { top: 72, left: 583, height: 30, width: 150} }, { title: "Items list", text: "This is the heart of your sled - the list of items. Each item has a title, status, details, and participants assignment. To organize the items, simply drag and drop them to the desired position.", style: { top: 106, left: 3, height: -14, width: -270} }, { title: "Status and comments", text: "On the left side of each item you'll find a checkbox indicating the item's status and a comments icon. Click on the status checkbox to toggle its state. Click the comments icon to expand the item, read the comments, or add a new comment.", style: { top: 120, left: 30, height: -26, width: 65} }, { title: "Status checkbox", text: 'The checkbox has three states: open, in-progress, and completed. <div class="image checkbox"></div>', style: { top: 120, left: 30, height: -26, width: 65} }, { title: "Comments icon", text: 'Comments have three states: none, old comments you\'ve read, and new comments. <div class="image comments"></div>', style: { top: 120, left: 30, height: -26, width: 65} }, { title: "Assignment and delete", text: "When the cursor hovers above the right side of each item, an assignment icon and a delete icon appear. Click the assignment icon to open the menu.", style: { top: 120, right: -325, height: -26, width: 85} }, { title: "Item assignment menu", text: 'Use the menu to assign the item to one or more participants. <div class="image assign"></div>', style: { top: 120, right: -325, height: -26, width: 85} }, { title: "Item assignment icon", text: "Assigned items have a persistent icon, and a 'me' label if assigned to you. <div class=\"image assigned\"></div>", style: { top: 120, right: -325, height: -26, width: 85} }, { title: "Tips and suggestion", text: 'As you add details and items, Sled will be offering you tips and suggestions. Tips are ways to get more out of Sled, like using the three-state checkboxs. Suggestions are ideas you might want to add to your items, like "Buy cake" if you are planning a party.', style: { top: 106, right: -18, height: -14, width: 245} }, { title: "Account menu", text: "The account menu let's you manage your preferences, change your account information, manage email addresses, link to social networks, and log out.", style: { top: -10, right: -10, height: 40, width: 190} }, { title: "Got feedback?", text: "You've reached the end of the tour. We hope you'll find Sled useful and fun. If you have questions or suggestions, please use the feedback link to let us know. You can launch this tour again from the Account menu.", style: { top: -35, right: -10, height: 16, width: 110}}]; function D(R) { if (C) { return } C = true; var Q = E.one("#tour-guide-alignment"); var K = E.one("#tour-narative"); var P = E.one("#tour-guide"); var S = K.one("#tour-prev"); var I = K.one("#tour-next"); var M = K.one("#tour-close"); var L = K.one("#tour-end"); Q.removeClass("hide"); var N = G; if (R) { G += R } else { G = 0 } if (G < 0) { G = 0 } if (G >= B.length) { G = B.length - 1 } if (G === 0) { S.addClass("hide"); I.removeClass("hide"); L.addClass("hide") } else { if (G === B.length - 1) { S.removeClass("hide"); I.addClass("hide"); L.removeClass("hide") } else { S.removeClass("hide"); I.removeClass("hide"); L.addClass("hide") } } var H = JSON.parse(JSON.stringify(B[G].style)); if (H.width < 0) { H.width = parseInt(Q.getStyle("width"), 10) + H.width - H.left; P.addClass("stickyW") } else { P.removeClass("stickyW") } if (H.height < 0) { H.height = parseInt(Q.getStyle("height"), 10) + H.height - H.top; P.addClass("stickyH") } else { P.removeClass("stickyH") } if (N && B[N].style.hasOwnProperty("right")) { P.setStyles({ left: parseInt(Q.getStyle("width"), 10) + B[N].style.right - B[N].style.width, "float": null, "margin-right": null }) } var J = new E.Anim({ node: P, duration: 0.5 }); var O; if (H.hasOwnProperty("right")) { O = { left: null, "float": "right", "margin-right": -(H.right) + "px" }; H.left = parseInt(Q.getStyle("width"), 10) + H.right - H.width } J.set("to", H); J.run(); J.on("end", function () { if (O) { P.setStyles(O) } C = false }); if (G) { P.removeClass("hide") } else { P.addClass("hide") } K.one(".title").setContent(B[G].title); K.one(".text").setContent(B[G].text); K.one(".counter").setContent((G + 1) + "/" + B.length) } function F() { var K = E.one("#tour-guide-alignment"); var M = E.one("#tour-narative"); var P = M.one("#tour-prev"); var I = M.one("#tour-next"); var O = M.one("#tour-close"); var N = M.one("#tour-end"); function H() { K.addClass("hide") } function J(Q) { D(-1) } function L(Q) { D(1) } P.on("click", J); I.on("click", L); O.on("click", H); N.on("click", H); E.on("sled:launchTour", function () { D(0) }) } F(); E.namespace("sled").tour = {} }, "1.0.0", { requires: ["anim", "node"] }); YUI.add("sledtips", function (F) { var E = F.sled.gsled; function B(H, L) { if (!H || (H._networkRequestStatusCode && H._networkRequestStatusCode !== 200)) { return } var J = E.sleds[L]; if (!H || H.length <= 0 || !J) { return } J.tips = H; J.tip = J.tip || 0; var K = F.all("#tiptext"); var I = H[J.tip].text; K.setContent(I) } function C() { var H = E.sled; H.tip = H.tip + 1 < H.tips.length ? H.tip + 1 : 0; B(E.sled.tips, E.sled.id) } function D() { var H = E.sled; var I = H.tips[H.tip]; if (!I.context || I.context === "sled.title") { I.context = H.tip === -1 ? ".taskicon" : ".sled-title-box"; I.pos = H.tip === -1 ? 10 : [-10, -10, 50, 20] } if (I.context) { F.fire("sled:pointToNode", "#showtip", I.context, I.pos, true) } } function G() { var K = F.one("#showtips"); var I = F.all("#tips"); var L = F.one("#closetip"); var J = F.one("#showtip"); if (J) { J.on("click", function (M) { D() }) } var H = F.one("#nexttip"); if (H) { H.on("click", function (M) { C() }) } if (K) { K.on("click", function (M) { I.setStyle("display", "inline"); K.setStyle("display", "none") }) } if (I && L) { L.on("click", function (M) { I.setStyle("display", "none"); K.setStyle("display", "inline") }) } F.on("sled:renderTips", function (M, N) { B(M, N) }) } G(); F.namespace("sled").tips = { last: null} }, "1.0.0", { requires: ["node"] }); YUI.add("sleduiutils", function (E) { var H; var K; var D; var N = E.one("#pointTo"); var O; function J(R, S, U) { S = S || 3000; var T = E.one("#status"); T.removeClass("hide"); T.addClass("show"); R = "<a>" + R + "</a>"; T.one(".middleStatus h1").set("innerHTML", R); if (H) { clearTimeout(H) } H = setTimeout(function () { T.removeClass("show"); T.addClass("hide") }, S); if (K) { K.detach(); K = null } if (U) { K = T.one("a").on("click", U) } } function B(ab, ad, T, W, Y, X, ag, U) { var V = E.one("#confirm-overlay"); var S = E.one("#confirm-underlay"); var Z = V.one("#confirm-ok"); var af = V.one("#confirm-cancel"); var ae = V.one("#confirm-close"); Z.setContent(ag || "Ok"); af.setContent(U || "Cancel"); V.one("#confirm-title").setContent(ab); V.one("#confirm-text").setContent(ad); V.removeClass("hide"); V.addClass("show"); S.removeClass("hide"); S.addClass("show"); function aa() { V.addClass("hide"); V.removeClass("show"); S.addClass("hide"); S.removeClass("show"); E.Event.purgeElement(Z); E.Event.purgeElement(af); E.Event.purgeElement(ae) } function ac(ah) { aa(); if (T) { T(W) } } function R(ah) { aa(); if (Y) { Y(X) } } Z.on("click", ac); af.on("click", R); ae.on("click", R) } function P(X, Z, S, U, ac) { var T = E.one("#confirm-overlay"); var R = E.one("#confirm-underlay"); var V = T.one("#confirm-ok"); var ab = T.one("#confirm-cancel"); var aa = T.one("#confirm-close"); V.setContent(ac || "Ok"); ab.addClass("hide"); T.one("#confirm-title").setContent(X); T.one("#confirm-text").setContent(Z); T.removeClass("hide"); T.addClass("show"); R.removeClass("hide"); R.addClass("show"); function W() { T.addClass("hide"); T.removeClass("show"); R.addClass("hide"); R.removeClass("show"); ab.removeClass("hide"); E.Event.purgeElement(V); E.Event.purgeElement(ab); E.Event.purgeElement(aa) } function Y(ad) { W(); if (S) { S(U) } } V.on("click", Y); aa.on("click", Y) } function G(T) { if (!T || T.hasClass("animating")) { return } var S = T.getStyle("backgroundColor"); var R = new E.Anim({ node: T, to: { backgroundColor: "#ffe0b3" }, duration: 0.3, last: null }); pulseOnEndHandler = R.on("end", function () { R = null; var V = new E.Anim({ node: T, to: { backgroundColor: S }, duration: 0.3 }); V.on("end", function () { V = null; T.removeClass("animating") }); function U() { if (T.getStyle("display")) { V.run() } } setTimeout(U, 2000) }); T.addClass("animating"); if (T.getStyle("display")) { R.run() } } function C(T, ab, af, Z) { if (D.get("visible") && Z) { D.hide(); return } if (typeof T !== "object") { T = E.one(T) } if (typeof ab !== "object") { ab = E.one(ab) } if (!T || !ab) { return } var V = 0; var U = 0; var Y = 0; var R = 0; var ae = N.getStyle("border"); var ad = T.getXY(); var S = ab.getXY(); var ag = parseInt(ab.getStyle("width"), 10); var aa = parseInt(ab.getStyle("height"), 10); var ac = parseInt(N.getStyle("border-top-width"), 10) || 0; var X = parseInt(N.getStyle("border-left-width"), 10) || 0; if (af) { if (af instanceof Array && af.length >= 4) { V = af[0]; U = af[1]; Y = af[2]; R = af[3] } else { V = -af; U = -af; Y = 2 * af; R = 2 * af } } S[0] += V - X; S[1] += U - ac; ag += Y; aa += R; N.setXY(ad); N.setStyle("width", "0px"); N.setStyle("height", "0px"); var W = new E.Anim({ node: N, from: { xy: ad, width: 0, height: 0 }, to: { xy: S, width: ag, height: aa }, duration: 1.3, easing: E.Easing.easeBoth }); showMeEnd = W.on("start", function () { D.show(); N.focus() }); showMeEnd = W.on("end", function () { }); W.run() } function M(S, T) { S = (typeof S == "string" || S instanceof String) ? E.one(S) : S; S = S._node; if (!S) { return false } else { if (S.createTextRange) { var R = S.createTextRange(); R.collapse(true); R.moveEnd(T); R.moveStart(T); R.select(); return true } else { if (S.setSelectionRange) { S.setSelectionRange(T, T); return true } } } return false } function F(S, T, U) { S = (typeof S == "string" || S instanceof String) ? E.one(S) : S; S = S._node; if (S.setSelectionRange) { S.focus(); S.setSelectionRange(T, U) } else { if (S.createTextRange) { var R = S.createTextRange(); R.collapse(true); R.moveEnd("character", U); R.moveStart("character", T); R.select() } } } function Q(R, S) { F(R, S, S) } function L() { D = new E.Overlay({ srcNode: N, render: true, visible: false, zIndex: 100, plugins: [E.Plugin.OverlayModal, E.Plugin.OverlayKeepaligned, { fn: E.Plugin.OverlayAutohide, cfg: { focusedOutside: true}}] }); N.removeClass("sled-loading"); D.on("click", function (R) { D.hide() }); N.ancestor(".yui3-overlay", true).on("blur", function (R) { D.hide() }); E.on("sled:pointToNode", function (R, T, S) { C(R, T, S) }); E.on("sled:networkError", function (R) { }); E.on("sled:statusMessage", function (R) { }); E.on("sled:changedBy", function (T, S, R) { var U = T; var V = E.sled.gsled.sled.participants[S]; if (V) { U += " by " + V.display.split(" ")[0] } J(U); if (typeof R !== "object") { R = E.one(R) } G(R) }); E.on("sled:confirm", function (U, T, S, R, Z, Y, X, W, V) { B(U, T, S, R, Z, Y, X, W, V) }); E.on("sled:inform", function (U, T, S, R, Z, Y, X, W, V) { P(U, T, S, R, Z, Y, X, W, V) }) } function I() { var U = 1 * 60 * 1000; var R = U; function T() { function V(W, X) { if (W && W.version) { O = W.version } } getClientProfile(V) } function S() { function V(Y, Z) { if (Y && Y.version) { var W = Y.version; function X(aa) { window.location.reload(true) } if (O[0] !== W[0]) { E.fire("sled:confirm", "Reload?", "A new version of sled is required.", X, null) } else { if (O[1] !== W[1]) { J("New version available - click this message to reload", 2 * 100 * R, X) } } } } getClientProfile(V) } T(); setInterval(S, R) } L(); I(); E.namespace("sled").uiutils = { setCursor: M, last: null} }, "1.0.0", { requires: ["anim", "node", "overlay", "widget-anim", "gallery-overlay-extras"] }); YUI.add("sled-calendar", function (C) { YUI.namespace("Y.Calendar"); var B = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]; if (typeof C.Node.prototype.queryAll == "undefined") { C.Node.prototype.queryAll = C.Node.prototype.all; C.Node.prototype.query = C.Node.prototype.one; C.Node.get = C.Node.one; C.get = C.one } C.Calendar = function () { this.init.apply(this, arguments) }; C.mix(C.Calendar, { init: function (G, E) { var F = this; F.id = F.C_Id = G; F.buildParam(E); var D = C.one("#" + G); F.trigger = D; F.C_Id = "C_" + Math.random().toString().replace(/.\./i, ""); F.con = C.Node.create('<div id="' + F.C_Id + '"></div>'); C.one("body").appendChild(F.con); F.con.setStyle("top", "0px"); F.con.setStyle("position", "absolute"); F.con.setStyle("zIndex", "1000"); F.con.setStyle("visibility", "hidden"); F.buildEventCenter(); F.render(); F.buildEvent(); return this }, buildEventCenter: function () { var E = this; var D = function () { this.publish("select"); this.publish("switch"); this.publish("selectcomplete"); this.publish("hide"); this.publish("show") }; C.augment(D, C.Event.Target); E.EventCenter = new D(); return this }, on: function (D, F) { var E = this; E.EventCenter.subscribe(D, F); return this }, render: function (E) { var D = this; var E = E || {}; D.parseParam(E); D.ca = []; D.con.set("innerHTML", ""); D.ca.push(new D.Call({ year: D.year, month: D.month, prev_arrow: true, next_arrow: true }, D)); D.ca[0].render(); return this }, showdate: function (F, E) { var D = new Date(E - 0 + F * 86400000); D = D.getFullYear() + "/" + (D.getMonth() + 1) + "/" + D.getDate(); return new Date(D) }, buildEvent: function () { var E = this; for (var D = 0; D < E.EV.length; D++) { if (typeof E.EV[D] != "undefined") { E.EV[D].detach() } } E.EV[0] = C.Node.get("document").on("click", function (G) { if (G.target.get("id") == E.C_Id) { return } var F = G.target.ancestor(function (H) { if (H.get("id") == E.C_Id) { return true } else { return false } }); if (typeof F == "undefined" || F == null) { E.hide() } }); E.EV[1] = C.one("#" + E.id).on("click", function (F) { F.halt(); if (F.type == "click") { E.toggle() } }); return this }, toggle: function () { var D = this; if (D.con.getStyle("visibility") == "hidden") { D.show() } else { D.hide() } }, inArray: function (F, E) { var H = false; for (var G = 0, D = E.length; G < D; G++) { if (E[G] == F) { H = true; break } } return H }, show: function () { var F = this; F.con.setStyle("visibility", ""); var E = F.trigger.getXY()[0]; var D = F.trigger.getXY()[1] + F.trigger.get("region").height; F.con.setStyle("left", E.toString() + "px"); F.con.setStyle("top", D.toString() + "px"); return this }, hide: function () { var D = this; D.con.setStyle("visibility", "hidden"); return this }, handleOffset: function () { var G = this, H = ["Sun", "Mon", "Tue", "Wen", "Thu", "Fri", "Sat"], E = "<span>{$day}</span>", J = G.startDay, I = "", D = []; for (var F = 0; F < 7; F++) { D[F] = { day: H[(F - J + 7) % 7]} } I = G.templetShow(E, D); return { day_html: I} }, buildParam: function (E) { var D = this; if (typeof E == "undefined" || E == null) { var E = {} } D.date = (typeof E.date == "undefined" || E.date == null) ? new Date() : E.date; D.selected = (typeof E.selected == "undefined" || E.selected == null) ? D.date : E.selected; D.startDay = (typeof E.startday == "undefined" || E.startDay == null) ? 0 : E.startDay; if (E.startDay) { D.startDay = (7 - E.startDay) % 7 } D.EV = []; return this }, parseParam: function (F) { var E = this; if (typeof F == "undefined" || F == null) { var F = {} } for (var D in F) { E[D] = F[D] } E.handleDate(); return this }, getNumOfDays: function (D, E) { return 32 - new Date(D, E - 1, 32).getDate() }, templetShow: function (E, J) { var I = this; if (J instanceof Array) { var G = ""; for (var F = 0; F < J.length; F++) { G += I.templetShow(E, J[F]) } E = G } else { var K = E.match(/{\$(.*?)}/g); if (J !== undefined && K != null) { for (var F = 0, D = K.length; F < D; F++) { var H = K[F].replace(/({\$)|}/g, ""); value = (J[H] !== undefined) ? J[H] : ""; E = E.replace(K[F], value) } } } return E }, handleDate: function () { var E = this; var D = E.date; E.weekday = D.getDay() + 1; E.day = D.getDate(); E.month = D.getMonth(); E.year = D.getFullYear(); return this }, monthAdd: function () { var D = this; if (D.month == 11) { D.year++; D.month = 0 } else { D.month++ } D.date = new Date(D.year.toString() + "/" + (D.month + 1).toString() + "/1"); return this }, monthMinus: function () { var D = this; if (D.month == 0) { D.year--; D.month = 11 } else { D.month-- } D.date = new Date(D.year.toString() + "/" + (D.month + 1).toString() + "/1"); return this }, computeNextMonth: function (D) { var G = this; var F = D[0]; var E = D[1]; if (E == 11) { F++; E = 0 } else { E++ } return [F, E] }, Call: function (E, D) { this.fathor = D; this.month = Number(E.month); this.year = Number(E.year); this.prev_arrow = E.prev_arrow; this.next_arrow = E.next_arrow; this.node = null; this.timmer = null; this.id = ""; this.EV = []; this.html = ['<div class="calendar" id="{$id}">', '<div class="header">', '<a class="prev {$prev}">&lt;&lt;</a>', '<div class="title">{$title}</div>', '<a class="next {$next}">&gt;&gt;</a>', "</div>", '<div class="days">', '<div class="weekdays">', D.handleOffset().day_html, "</div>", '<div class="row clearfix">', "{$ds}", "</div>", "</div>", "</div>"].join(""); this.Verify = function () { var G = function (I) { if (!/^\d+$/i.test(I)) { return false } I = Number(I); return !(I < 1 || I > 31) }, F = function (I) { if (!/^\d+$/i.test(I)) { return false } I = Number(I); return !(I < 100 || I > 10000) }, H = function (I) { if (!/^\d+$/i.test(I)) { return false } I = Number(I); return !(I < 1 || I > 12) }; return { isDay: G, isYear: F, isMonth: H} }; this.renderUI = function () { var G = this; G.HTML = ""; var F = {}; F.prev = ""; F.next = ""; F.title = ""; F.ds = ""; if (!G.prev_arrow) { F.prev = "hidden" } if (!G.next_arrow) { F.next = "hidden" } F.id = G.id = "cc-" + Math.random().toString().replace(/.\./i, ""); F.title = B[G.month] + " " + G.year; G.createDS(); F.ds = G.ds; G.fathor.con.appendChild(C.Node.create(G.fathor.templetShow(G.html, F))); G.node = C.one("#" + G.id); return this }; this.buildEvent = function () { var H = this; var F = C.one("#" + H.id); for (var G = 0; G < H.EV.length; G++) { if (typeof H.EV[G] != "undefined") { H.EV[G].detach() } } H.EV[0] = F.query("div.row").on("click", function (I) { I.halt(); if (I.target.hasClass("hide")) { return } var K = Number(I.target.get("innerHTML")); var J = new Date(H.year + "/" + Number(H.month + 1) + "/" + K); H.fathor.dt_date = J; H.fathor.EventCenter.fire("select", J); H.fathor.hide(); H.fathor.render({ selected: J }) }); H.EV[1] = F.query("a.prev").on("click", function (I) { I.halt(); H.fathor.monthMinus().render(); H.fathor.EventCenter.fire("switch", new Date(H.fathor.year + "/" + (H.fathor.month + 1) + "/01")) }); H.EV[2] = F.query("a.next").on("click", function (I) { I.halt(); H.fathor.monthAdd().render(); H.fathor.EventCenter.fire("switch", new Date(H.fathor.year + "/" + (H.fathor.month + 1) + "/01")) }); return this }; this.getNode = function () { var F = this; return F.node }; this.createDS = function () { var L = this; var H = ""; var K = (new Date(L.year + "/" + (L.month + 1) + "/01").getDay() + L.fathor.startDay + 7) % 7; var F = L.fathor.getNumOfDays(L.year, L.month + 1) + K; for (var G = 0; G < F; G++) { if (/532/.test(C.UA.webkit)) { var I = new Date(L.year + "/" + Number(L.month + 1) + "/" + (G + 1 - K).toString()) } else { var I = new Date(L.year + "/" + Number(L.month + 1) + "/" + (G + 2 - K).toString()) } var J = new Date(L.year + "/" + Number(L.month + 1) + "/" + (G + 1 - K).toString()); if (G < K) { H += '<a class="hide">0</a>' } else { if (G == (K + (new Date()).getDate() - 1) && (new Date()).getFullYear() == L.year && (new Date()).getMonth() == L.month && G == (K + L.fathor.selected.getDate() - 1) && L.month == L.fathor.selected.getMonth() && L.year == L.fathor.selected.getFullYear()) { H += '<a class="selected today">' + (G - K + 1) + "</a>" } else { if (G == (K + (new Date()).getDate() - 1) && (new Date()).getFullYear() == L.year && (new Date()).getMonth() == L.month) { H += '<a class="today">' + (G - K + 1) + "</a>" } else { if (G == (K + L.fathor.selected.getDate() - 1) && L.month == L.fathor.selected.getMonth() && L.year == L.fathor.selected.getFullYear()) { H += '<a class="selected">' + (G - K + 1) + "</a>" } else { H += "<a>" + (G - K + 1) + "</a>" } } } } } if (F % 7 != 0) { for (var G = 0; G < (7 - F % 7); G++) { H += '<a class="hide">0</a>' } } L.ds = H; return this }; this.render = function () { var F = this; F.renderUI(); F.buildEvent(); return this } } }, 0, null, 4) }, "@VERSION@", { requires: ["node"] }) }, "@VERSION@", { requires: ["node"] });